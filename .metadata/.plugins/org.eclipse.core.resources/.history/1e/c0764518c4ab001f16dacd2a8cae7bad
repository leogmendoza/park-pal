/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TIM2_FREQUENCY 42000000
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
/// Helper Function Declarations
int _write(int file, char *data, int len);
void delay_us(uint16_t us);

/// Core Functions Declarations
// - LED Matrix
void store(void);
void reset_display(void);
void shift_out(GPIO_TypeDef *data_port, uint16_t data_pin,
        	   GPIO_TypeDef *shift_port, uint16_t shift_pin,
               uint8_t bit_order, uint8_t value);
void display_pattern(uint8_t * pattern_array);
// - Buzzer
uint16_t prescaler_for_frequency(uint32_t frequency_output_Hz);
void pause_buzzer(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Pattern Arrays
uint8_t right_arrow[] = {
              0b00001000,
              0b00001100,
              0b11111110,
              0b11111111,
              0b11111111,
              0b11111110,
              0b00001100,
              0b00001000
              };

uint8_t left_arrow[] = {
              0b00010000,
              0b00110000,
              0b01111111,
              0b11111111,
              0b11111111,
              0b01111111,
              0b00110000,
              0b00010000
              };

uint8_t down_arrow[] = {
              0b00111100,
              0b00111100,
              0b00111100,
              0b00111100,
              0b11111111,
              0b01111110,
              0b00111100,
              0b00011000
};

uint8_t up_arrow[] = {
              0b00011000,
              0b00111100,
              0b01111110,
              0b11111111,
              0b00111100,
              0b00111100,
              0b00111100,
              0b00111100
};

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  // Start Timer 1 after peripherals are initialized (for microsecond delay))
  HAL_TIM_Base_Start(&htim1);
  // Start Timer 2 in PWM mode after everything else has been initialized
  // NOTE: Make sure timer # and channel # are consistent with chosen pin's PWM config
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  // Variables for UART [NOTE: make sure to declare in main()])
  char condition[30];  // Set up a variable that can be modified to store data before TX/RX
  char UART1_rxBuffer[20];  // Set up a buffer string to receive data
  // Change prescaler according to calculation based on desired frequency
  ////////__HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(523) );

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/// RX
	// Clear RX buffer before receiving new data
	memset(UART1_rxBuffer, 0, 20);
	// Receive data from Input MCU (timeout slightly longer than Input MCU delay)
	HAL_UART_Receive(&huart1, (uint8_t*)UART1_rxBuffer, 20, 1050);
	// Print received data to serial console
	printf("Data Received from Input MCU: %s\r\n", UART1_rxBuffer);
	// Package the message up in an operable variable
	strcpy(condition, UART1_rxBuffer);

	// Update the two state pins that represent the four possible conditions
	// - this is necessary because LED Matrix will update correctly if logic
	// - based on GPIO pin states
	if ( strcmp( condition, "Move back" ) == 0 ) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
	} else if ( strcmp( condition, "Move left" ) == 0 ) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
	} else if ( strcmp( condition, "Move right" ) == 0 ) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
	}

	// Control the pattern displayed by LED Matrix using if statements
	if ( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) &&
		 (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) ) {
		display_pattern(down_arrow);
	} else if ( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) &&
			    (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) ) {
		display_pattern(left_arrow);
	} else if ( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) &&
		    (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) ) {
		display_pattern(right_arrow);
	} else {
		reset_display();
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 84-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHIFT_CLOCK_Pin|STORE_CLOCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_SERIAL_GPIO_Port, DATA_SERIAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin SHIFT_CLOCK_Pin STORE_CLOCK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SHIFT_CLOCK_Pin|STORE_CLOCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : DATA_SERIAL_Pin */
  GPIO_InitStruct.Pin = DATA_SERIAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DATA_SERIAL_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/// Helper Function Definitions

// Override printf() to transmit message through UART
int _write(int file, char *data, int len) {
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
	return len;
}

// Create a delay in microseconds (us)
void delay_us (uint16_t time_us) {
	// Reset Timer 1 Counter to initiate new count
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	// Wait for Timer 1 Counter to reach input time in us
	while(__HAL_TIM_GET_COUNTER(&htim1) < time_us);

	return;
}

/// Core Function Definitions

// Copy the shift register data to the storage register, thus providing output
void store(void) {
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	delay_us(1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
	//delay_us(1);

	return;
}

// Reset the LED Matrix; turn off all lights
void reset_display(void) {
	shift_out(GPIOB, GPIO_PIN_10,
		      GPIOA, GPIO_PIN_8,
			  1, 0b11111111);
	shift_out(GPIOB, GPIO_PIN_10,
			  GPIOA, GPIO_PIN_8,
			  1, 0b00000000);
	store();
}

// Shift out a byte of data one bit at a time
void shift_out(GPIO_TypeDef *data_port, uint16_t data_pin,
        	   GPIO_TypeDef *shift_port, uint16_t shift_pin,
               uint8_t bit_order, uint8_t value) {
	//Ensure data type of iterable is size_t to prevent overflow
	for ( size_t i = 0; i < 8; ++i ) {
		// LSBFIRST (shift least significant bit first)
		if ( bit_order == 0 ) {
			/// Check if the value in the i-th bit is 1
			//  - Use bitwise & to mask the i-th bit and check if the result is non-zero
			if ( value & (1 << i) ) {
				// Write a 1 to the serial data pin
				HAL_GPIO_WritePin(data_port, data_pin, SET);
			// i-th bit is 0
			} else {
				// Write a 0 to the serial data pin
				HAL_GPIO_WritePin(data_port, data_pin, RESET);
			}
		// MSBFIRST (shift most significant bit first))
		} else if ( bit_order == 1 ) {
			// Instead  of checking from the right, check from left to right
			if ( value & ( 1 << (7 - i) ) ) {
				HAL_GPIO_WritePin(data_port, data_pin, SET);
			} else {
				HAL_GPIO_WritePin(data_port, data_pin, RESET);
			}
		}

		// Pulse to clock pin to shift the bit out ot the shift register
		HAL_GPIO_WritePin(shift_port, shift_pin, SET);
		delay_us(1);
		HAL_GPIO_WritePin(shift_port, shift_pin, RESET);
	}
}

// Show pattern on LED matrix for an instant by method of scanning
void display_pattern(uint8_t * pattern_array) {
	for ( size_t i = 0; i < 8; ++i ) {
		/// NOTE: since sent first, stored in SR #2
		// Displays the pattern for each row
		// - Tilda (~) flips the bits; needed since columns require LOW to complete circuit
		// -> To light up an LED in a row, its bit must be 0 (LOW)
		shift_out(GPIOB, GPIO_PIN_10,
				  GPIOA, GPIO_PIN_8,
				  0, ~pattern_array[i]);
		/// NOTE: since sent last, stored in SR #2
		// Scan (turn on) through each column
		shift_out(GPIOB, GPIO_PIN_10,
				  GPIOA, GPIO_PIN_8,
				  0, 0b10000000 >> i);

		store();
	}
}

// Calculate the prescaler value depending on the desired frequency
uint16_t prescaler_for_frequency(uint32_t output_frequency_Hz) {
	if ( output_frequency_Hz == 0 ) {
		return 0;
	} else {
		// Note: "- 1" is to compensate for 1 being automatically added in the prescaler register
		return ( ( TIM2_FREQUENCY / (1000 * output_frequency_Hz) ) - 1 );
	}
}

// Pause the buzzer noise indefinitely
void pause_buzzer(void) {
	__HAL_TIM_SET_PRESCALER(&htim2, 0);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
