/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
// Helper Function Declarations
int _write(int file, char *data, int len);
void delay_us(uint16_t us);

// Core Function Declaratons
float measure_pulse_duration(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void send_trigger_pulse(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
float measure_distance(GPIO_TypeDef* TRIG_GPIOx, uint16_t TRIG_GPIO_Pin,
					   GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Measurement Variables
float s1_duration;
float s1_distance_cm;
float s2_duration;
float s2_distance_cm;
float s3_duration;
float s3_distance_cm;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Start Timer 1 after peripherals are initialized
  HAL_TIM_Base_Start(&htim1);
  // Variables for UART [NOTE: make sure to declare in main()])
  char *condition;  // Set up a variable that can be modified to store data before TX/RX
  char UART1_txBuffer[20];  // Set up a buffer string to transmit data
  // Sensor Parameters
  float side_threshold = 40.00f;
  float top_threshold = 30.00f;
  // Sensor States
  uint8_t s1_safe;
  uint8_t s2_safe;
  uint8_t s3_safe;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Sensor 1 (Top) Measurement
	s1_distance_cm = measure_distance(GPIOB, GPIO_PIN_3,
									  GPIOB, GPIO_PIN_5);
	// Sensor 2 (Left) Measurement
	s2_distance_cm = measure_distance(GPIOB, GPIO_PIN_4,
									  GPIOB, GPIO_PIN_10);
	// Sensor 3 (Right) Measurement
	s3_distance_cm = measure_distance(GPIOA, GPIO_PIN_8,
									  GPIOC, GPIO_PIN_7);

	// Print distance measurements (cm) with two decimal places
	printf("Sensor 1 (Top) Distance: %.2f cm\r\n", s1_distance_cm);
	printf("Sensor 2 (Left) Distance: %.2f cm\r\n", s2_distance_cm);
	printf("Sensor 3 (Right) Distance: %.2f cm\r\n", s3_distance_cm);

	// Determine states of each sensor
	if (s1_distance_cm  >= top_threshold) {
		s1_safe = 1;
	} else {
		s1_safe = 0;
	}
	if (s2_distance_cm >= side_threshold) {
		s2_safe = 1;
	} else {
		s2_safe = 0;
	}
	if (s3_distance_cm >= side_threshold) {
		s3_safe = 1;
	} else {
		s3_safe = 0;
	}

	/// Determine condition for Output MCU
	// Car is correctly parkec
	if ( (s1_safe == 1) && (s2_safe == 1) && (s3_safe == 1) ) {
		condition = "Success";
	} else if () {

	} else if ( (s1_safe == 1) && ( (s2_safe == 0) || (s3_safe == 0) ) ) {
		if (s2_safe == 0) {
			condition = "Move right";
		} else {
			condition = "Move left";
		}
	} else {
		condition = "Floating";
	}

	/// TX
	// Format the message and package it up in the buffer
    sprintf(UART1_txBuffer, "%s", condition);
	// Transmit to Output MCU
	HAL_UART_Transmit(&huart1, (uint8_t*)UART1_txBuffer, 20, HAL_MAX_DELAY);

	// Wait to send the next trigger pulse to avoid overlapping of measurements (min 25 us)
	HAL_Delay(1000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 84-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|S3_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_TRIG_Pin|S2_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin S3_TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|S3_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : S2_ECHO_Pin S1_ECHO_Pin */
  GPIO_InitStruct.Pin = S2_ECHO_Pin|S1_ECHO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : S3_ECHO_Pin */
  GPIO_InitStruct.Pin = S3_ECHO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(S3_ECHO_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : S1_TRIG_Pin S2_TRIG_Pin */
  GPIO_InitStruct.Pin = S1_TRIG_Pin|S2_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/// Helper Function Definitions
// Override printf() to transmit message through UART
int _write(int file, char *data, int len) {
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
	return len;
}
// Create a delay in microseconds (us)
void delay_us (uint16_t time_us) {
	// Reset Timer 1 Counter to initiate new count
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	// Wait for Timer 1 Counter to reach input time in us
	while(__HAL_TIM_GET_COUNTER(&htim1) < time_us);

	return;
}

/// Core Function Definitions
// Initiate sensor time measurement
void send_trigger_pulse(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	//Reset Trig Pin to ensure clean signal
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	delay_us(2);  // Buffer time

	// Send trigger signal to Trig Pin
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	delay_us(10);  // Supply 10 us pulse to start ranging
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
}
// Measure how long Echo Pin is HIGH after being SET from RESET using Timer 1
float measure_pulse_duration(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	// Time Measurement Variables
	uint32_t start_time = 0.0;
	uint32_t end_time = 0.0;
	uint32_t pulse_duration_ticks = 0.0;
	float pulse_duration_us = 0.0f;

	// Wait for Echo Pin to be SET (rising edge of pulse)
	while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);

	// Start timing when Echo Pin is SET
	start_time = __HAL_TIM_GET_COUNTER(&htim1);  // Capture current timer value

	// Wait for Echo Pin to be RESET (falling edge of pulse)
	while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET);

	// Capture end time when pin is RESET
	end_time = __HAL_TIM_GET_COUNTER(&htim1);

	// Calculate pulse duration in terms of timer ticks
	if (end_time >= start_time) {
		pulse_duration_ticks = end_time - start_time;
	} else {
		pulse_duration_ticks = (0xFFFFFFFF - start_time) + end_time;  // Handle timer overflow
	}

	// Note: Each timer tick corresponds to 1 microsecond
	// Convert pulse duration from uint32_t to float
	pulse_duration_us = (float)pulse_duration_ticks;  // Cast as float

	return pulse_duration_us;
}

// Measure the distance between object and sensor in centimetres
float measure_distance(GPIO_TypeDef* TRIG_GPIOx, uint16_t TRIG_GPIO_Pin,
					   GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin) {
    // Distance Measurement Variables
	float sx_duration;
	float sx_distance_cm;

	// Activate sensor measurement
    send_trigger_pulse(TRIG_GPIOx, TRIG_GPIO_Pin);

    /// Return pulse duration in microseconds
    // If SET, waits for the moment pin is SET from RESET
    // Stops timing when pin is RESET (when echo returns to receiver)
    sx_duration = measure_pulse_duration(ECHO_GPIOx, ECHO_GPIO_Pin);

    // Convert to duration to distance in centimetres using d = vt and account for reflection
    sx_distance_cm = ( ( sx_duration * (1.0E-6f) ) * (343.0f) * (100.0f) ) / 2.0f;

	return sx_distance_cm;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
