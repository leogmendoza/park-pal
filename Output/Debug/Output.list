
Output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045fc  080045fc  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000055fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08004604  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000088  0800468c  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800468c  00006318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c469  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9a  00000000  00000000  00012521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000140c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  00014d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f68  00000000  00000000  0001572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcc8  00000000  00000000  0002c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f41f  00000000  00000000  0003a35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c977d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000c97c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cd48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004540 	.word	0x08004540

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004540 	.word	0x08004540

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	@ 0x38
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fde7 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8a7 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fa2b 	bl	80009f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f9ff 	bl	80009a4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005a6:	f000 f90d 	bl	80007c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005aa:	f000 f95b 	bl	8000864 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 f9cf 	bl	8000950 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer 1 after peripherals are initialized (for microsecond delay))
  HAL_TIM_Base_Start(&htim1);
 80005b2:	4842      	ldr	r0, [pc, #264]	@ (80006bc <main+0x12c>)
 80005b4:	f001 fdb6 	bl	8002124 <HAL_TIM_Base_Start>
  // Start Timer 2 in PWM mode after everything else has been initialized
  // NOTE: Make sure timer # and channel # are consistent with chosen pin's PWM config
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4841      	ldr	r0, [pc, #260]	@ (80006c0 <main+0x130>)
 80005bc:	f001 fe66 	bl	800228c <HAL_TIM_PWM_Start>
  char UART1_rxBuffer[20];  // Set up a buffer string to receive data
  //// Change prescaler according to calculation based on desired frequency
  /// __HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(440) );
  /// __HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(784) );
  // LED Matrix Variable
  uint8_t *current_pattern = NULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/// RX
	// Clear RX buffer before receiving new data
	memset(UART1_rxBuffer, 0, 20);
 80005c4:	463b      	mov	r3, r7
 80005c6:	2214      	movs	r2, #20
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f997 	bl	80038fe <memset>
	// Receive data from Input MCU (***make timeout as small as possible to avoid LED Matrix flickering)
	HAL_UART_Receive(&huart1, (uint8_t*)UART1_rxBuffer, 20, 1);
 80005d0:	4639      	mov	r1, r7
 80005d2:	2301      	movs	r3, #1
 80005d4:	2214      	movs	r2, #20
 80005d6:	483b      	ldr	r0, [pc, #236]	@ (80006c4 <main+0x134>)
 80005d8:	f002 fcb3 	bl	8002f42 <HAL_UART_Receive>
	// Package the message up in an operable variable
	strcpy(condition, UART1_rxBuffer);
 80005dc:	463a      	mov	r2, r7
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fa06 	bl	80039f6 <strcpy>

	// Only run and make changes if Output MCU receives data
	if ( strcmp( condition, "" ) != 0 ) {
 80005ea:	7d3b      	ldrb	r3, [r7, #20]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d060      	beq.n	80006b2 <main+0x122>
		// Print received data to serial console
		printf("Data Received from Input MCU: %s\r\n", UART1_rxBuffer);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4834      	ldr	r0, [pc, #208]	@ (80006c8 <main+0x138>)
 80005f6:	f003 f92d 	bl	8003854 <iprintf>

		// Control the pattern displayed by LED Matrix using if statements
		if ( strcmp( condition, "Move back" ) == 0 ) {
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4933      	ldr	r1, [pc, #204]	@ (80006cc <main+0x13c>)
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fded 	bl	80001e0 <strcmp>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10f      	bne.n	800062c <main+0x9c>
			if ( current_pattern != down_arrow ) {
 800060c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800060e:	4a30      	ldr	r2, [pc, #192]	@ (80006d0 <main+0x140>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d04e      	beq.n	80006b2 <main+0x122>
				current_pattern = down_arrow;
 8000614:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <main+0x140>)
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
				__HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(440) );
 8000618:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800061c:	f000 fb50 	bl	8000cc0 <prescaler_for_frequency>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <main+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
 800062a:	e042      	b.n	80006b2 <main+0x122>
			}
		} else if ( strcmp( condition, "Move left" ) == 0 ) {
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4928      	ldr	r1, [pc, #160]	@ (80006d4 <main+0x144>)
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdd4 	bl	80001e0 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10f      	bne.n	800065e <main+0xce>
			if ( current_pattern != left_arrow ) {
 800063e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000640:	4a25      	ldr	r2, [pc, #148]	@ (80006d8 <main+0x148>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d035      	beq.n	80006b2 <main+0x122>
				current_pattern = left_arrow;
 8000646:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <main+0x148>)
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
				__HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(784) );
 800064a:	f44f 7044 	mov.w	r0, #784	@ 0x310
 800064e:	f000 fb37 	bl	8000cc0 <prescaler_for_frequency>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <main+0x130>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
 800065c:	e029      	b.n	80006b2 <main+0x122>
			}
		} else if ( strcmp( condition, "Move right" ) == 0 ) {
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	491e      	ldr	r1, [pc, #120]	@ (80006dc <main+0x14c>)
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fdbb 	bl	80001e0 <strcmp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10f      	bne.n	8000690 <main+0x100>
			if ( current_pattern != right_arrow ) {
 8000670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <main+0x150>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d01c      	beq.n	80006b2 <main+0x122>
				current_pattern = right_arrow;
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <main+0x150>)
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
				__HAL_TIM_SET_PRESCALER( &htim2, prescaler_for_frequency(784) );
 800067c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000680:	f000 fb1e 	bl	8000cc0 <prescaler_for_frequency>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <main+0x130>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
 800068e:	e010      	b.n	80006b2 <main+0x122>
			}
		} else if ( strcmp( condition, "Success" ) == 0 ) {
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4913      	ldr	r1, [pc, #76]	@ (80006e4 <main+0x154>)
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fda2 	bl	80001e0 <strcmp>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d107      	bne.n	80006b2 <main+0x122>
			if ( current_pattern != checkmark ) {
 80006a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006a4:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <main+0x158>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <main+0x122>
				current_pattern = checkmark;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <main+0x158>)
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
				pause_buzzer();
 80006ae:	f000 fb23 	bl	8000cf8 <pause_buzzer>
			}
		}
	}
	display_pattern(current_pattern);
 80006b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80006b4:	f000 faca 	bl	8000c4c <display_pattern>
	memset(UART1_rxBuffer, 0, 20);
 80006b8:	e784      	b.n	80005c4 <main+0x34>
 80006ba:	bf00      	nop
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	20000134 	.word	0x20000134
 80006c8:	08004558 	.word	0x08004558
 80006cc:	0800457c 	.word	0x0800457c
 80006d0:	20000010 	.word	0x20000010
 80006d4:	08004588 	.word	0x08004588
 80006d8:	20000008 	.word	0x20000008
 80006dc:	08004594 	.word	0x08004594
 80006e0:	20000000 	.word	0x20000000
 80006e4:	080045a0 	.word	0x080045a0
 80006e8:	20000018 	.word	0x20000018

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 f8ff 	bl	80038fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemClock_Config+0xd0>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd4>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ffec 	bl	8001754 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 fac7 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa4e 	bl	8001c44 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ae:	f000 fab1 	bl	8000d14 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <MX_TIM1_Init+0x98>)
 80007e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000860 <MX_TIM1_Init+0x9c>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM1_Init+0x98>)
 80007e8:	2253      	movs	r2, #83	@ 0x53
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_TIM1_Init+0x98>)
 80007f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_TIM1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000800:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_TIM1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_TIM1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080c:	4813      	ldr	r0, [pc, #76]	@ (800085c <MX_TIM1_Init+0x98>)
 800080e:	f001 fc39 	bl	8002084 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 fa7c 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_TIM1_Init+0x98>)
 800082a:	f001 fea1 	bl	8002570 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 fa6e 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_TIM1_Init+0x98>)
 8000846:	f002 fa33 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000850:	f000 fa60 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000a4 	.word	0x200000a4
 8000860:	40010000 	.word	0x40010000

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	@ 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000894:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_TIM2_Init+0xe8>)
 8000896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800089c:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <MX_TIM2_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80008a8:	4b28      	ldr	r3, [pc, #160]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008bc:	4823      	ldr	r0, [pc, #140]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008be:	f001 fbe1 	bl	8002084 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008c8:	f000 fa24 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481c      	ldr	r0, [pc, #112]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008da:	f001 fe49 	bl	8002570 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008e4:	f000 fa16 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e8:	4818      	ldr	r0, [pc, #96]	@ (800094c <MX_TIM2_Init+0xe8>)
 80008ea:	f001 fc75 	bl	80021d8 <HAL_TIM_PWM_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008f4:	f000 fa0e 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4619      	mov	r1, r3
 8000906:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_TIM2_Init+0xe8>)
 8000908:	f002 f9d2 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000912:	f000 f9ff 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000916:	2360      	movs	r3, #96	@ 0x60
 8000918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800091a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800091e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_TIM2_Init+0xe8>)
 8000930:	f001 fd5c 	bl	80023ec <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800093a:	f000 f9eb 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800093e:	4803      	ldr	r0, [pc, #12]	@ (800094c <MX_TIM2_Init+0xe8>)
 8000940:	f000 fa4c 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	@ 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000ec 	.word	0x200000ec

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <MX_USART1_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000976:	2204      	movs	r2, #4
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART1_UART_Init+0x4c>)
 8000988:	f002 fa00 	bl	8002d8c <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f000 f9bf 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000134 	.word	0x20000134
 80009a0:	40011000 	.word	0x40011000

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f002 f9d6 	bl	8002d8c <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f995 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000017c 	.word	0x2000017c
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a38      	ldr	r2, [pc, #224]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a31      	ldr	r2, [pc, #196]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_GPIO_Init+0x100>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHIFT_CLOCK_Pin|STORE_CLOCK_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000a84:	481d      	ldr	r0, [pc, #116]	@ (8000afc <MX_GPIO_Init+0x104>)
 8000a86:	f000 fe4b 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_SERIAL_GPIO_Port, DATA_SERIAL_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a90:	481b      	ldr	r0, [pc, #108]	@ (8000b00 <MX_GPIO_Init+0x108>)
 8000a92:	f000 fe45 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4815      	ldr	r0, [pc, #84]	@ (8000b04 <MX_GPIO_Init+0x10c>)
 8000aae:	f000 fcb3 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SHIFT_CLOCK_Pin STORE_CLOCK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SHIFT_CLOCK_Pin|STORE_CLOCK_Pin;
 8000ab2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_GPIO_Init+0x104>)
 8000acc:	f000 fca4 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_SERIAL_Pin */
  GPIO_InitStruct.Pin = DATA_SERIAL_Pin;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DATA_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0x108>)
 8000aea:	f000 fc95 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	@ 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020800 	.word	0x40020800

08000b08 <_write>:

/* USER CODE BEGIN 4 */
/// Helper Function Definitions

// Override printf() to transmit message through UART
int _write(int file, char *data, int len) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <_write+0x28>)
 8000b20:	f002 f984 	bl	8002e2c <HAL_UART_Transmit>
	return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000017c 	.word	0x2000017c

08000b34 <delay_us>:

// Create a delay in microseconds (us)
void delay_us (uint16_t time_us) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	// Reset Timer 1 Counter to initiate new count
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <delay_us+0x2c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
	// Wait for Timer 1 Counter to reach input time in us
	while(__HAL_TIM_GET_COUNTER(&htim1) < time_us);
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <delay_us+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d3f9      	bcc.n	8000b48 <delay_us+0x14>

	return;
 8000b54:	bf00      	nop
}
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	200000a4 	.word	0x200000a4

08000b64 <store>:

/// Core Function Definitions

// Copy the shift register data to the storage register, thus providing output
void store(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <store+0x28>)
 8000b70:	f000 fdd6 	bl	8001720 <HAL_GPIO_WritePin>
	delay_us(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ffdd 	bl	8000b34 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <store+0x28>)
 8000b82:	f000 fdcd 	bl	8001720 <HAL_GPIO_WritePin>
	//delay_us(1);

	return;
 8000b86:	bf00      	nop
}
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020000 	.word	0x40020000

08000b90 <shift_out>:
}

// Shift out a byte of data one bit at a time
void shift_out(GPIO_TypeDef *data_port, uint16_t data_pin,
        	   GPIO_TypeDef *shift_port, uint16_t shift_pin,
               uint8_t bit_order, uint8_t value) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	817b      	strh	r3, [r7, #10]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	813b      	strh	r3, [r7, #8]
	//Ensure data type of iterable is size_t to prevent overflow
	for ( size_t i = 0; i < 8; ++i ) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e048      	b.n	8000c3c <shift_out+0xac>
		// LSBFIRST (shift least significant bit first)
		if ( bit_order == 0 ) {
 8000baa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d116      	bne.n	8000be0 <shift_out+0x50>
			/// Check if the value in the i-th bit is 1
			//  - Use bitwise & to mask the i-th bit and check if the result is non-zero
			if ( value & (1 << i) ) {
 8000bb2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <shift_out+0x42>
				// Write a 1 to the serial data pin
				HAL_GPIO_WritePin(data_port, data_pin, SET);
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f000 fda8 	bl	8001720 <HAL_GPIO_WritePin>
 8000bd0:	e022      	b.n	8000c18 <shift_out+0x88>
			// i-th bit is 0
			} else {
				// Write a 0 to the serial data pin
				HAL_GPIO_WritePin(data_port, data_pin, RESET);
 8000bd2:	897b      	ldrh	r3, [r7, #10]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f000 fda1 	bl	8001720 <HAL_GPIO_WritePin>
 8000bde:	e01b      	b.n	8000c18 <shift_out+0x88>
			}
		// MSBFIRST (shift most significant bit first))
		} else if ( bit_order == 1 ) {
 8000be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d117      	bne.n	8000c18 <shift_out+0x88>
			// Instead  of checking from the right, check from left to right
			if ( value & ( 1 << (7 - i) ) ) {
 8000be8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	fa42 f303 	asr.w	r3, r2, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <shift_out+0x7c>
				HAL_GPIO_WritePin(data_port, data_pin, SET);
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	2201      	movs	r2, #1
 8000c02:	4619      	mov	r1, r3
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f000 fd8b 	bl	8001720 <HAL_GPIO_WritePin>
 8000c0a:	e005      	b.n	8000c18 <shift_out+0x88>
			} else {
				HAL_GPIO_WritePin(data_port, data_pin, RESET);
 8000c0c:	897b      	ldrh	r3, [r7, #10]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f000 fd84 	bl	8001720 <HAL_GPIO_WritePin>
			}
		}

		// Pulse to clock pin to shift the bit out ot the shift register
		HAL_GPIO_WritePin(shift_port, shift_pin, SET);
 8000c18:	893b      	ldrh	r3, [r7, #8]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 fd7e 	bl	8001720 <HAL_GPIO_WritePin>
		delay_us(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ff85 	bl	8000b34 <delay_us>
		HAL_GPIO_WritePin(shift_port, shift_pin, RESET);
 8000c2a:	893b      	ldrh	r3, [r7, #8]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 fd75 	bl	8001720 <HAL_GPIO_WritePin>
	for ( size_t i = 0; i < 8; ++i ) {
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d9b3      	bls.n	8000baa <shift_out+0x1a>
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <display_pattern>:

// Show pattern on LED matrix for an instant by method of scanning
void display_pattern(uint8_t * pattern_array) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	6078      	str	r0, [r7, #4]
	for ( size_t i = 0; i < 8; ++i ) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e025      	b.n	8000ca6 <display_pattern+0x5a>
		// Displays the pattern for each row
		// - Tilda (~) flips the bits; needed since columns require LOW to complete circuit
		// -> To light up an LED in a row, its bit must be 0 (LOW)
		shift_out(GPIOB, GPIO_PIN_10,
				  GPIOA, GPIO_PIN_8,
				  0, ~pattern_array[i]);
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
		shift_out(GPIOB, GPIO_PIN_10,
 8000c62:	43db      	mvns	r3, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c70:	4a11      	ldr	r2, [pc, #68]	@ (8000cb8 <display_pattern+0x6c>)
 8000c72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <display_pattern+0x70>)
 8000c78:	f7ff ff8a 	bl	8000b90 <shift_out>
		/// NOTE: since sent last, stored in SR #2
		// Scan (turn on) through each column
		shift_out(GPIOB, GPIO_PIN_10,
				  GPIOA, GPIO_PIN_8,
				  0, 0b10000000 >> i);
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	fa42 f303 	asr.w	r3, r2, r3
		shift_out(GPIOB, GPIO_PIN_10,
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <display_pattern+0x6c>)
 8000c92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <display_pattern+0x70>)
 8000c98:	f7ff ff7a 	bl	8000b90 <shift_out>

		store();
 8000c9c:	f7ff ff62 	bl	8000b64 <store>
	for ( size_t i = 0; i < 8; ++i ) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d9d6      	bls.n	8000c5a <display_pattern+0xe>
	}
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <prescaler_for_frequency>:

// Calculate the prescaler value depending on the desired frequency
uint16_t prescaler_for_frequency(uint32_t output_frequency_Hz) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if ( output_frequency_Hz == 0 ) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <prescaler_for_frequency+0x12>
		return 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <prescaler_for_frequency+0x28>
	} else {
		// Note: "- 1" is to compensate for 1 being automatically added in the prescaler register
		return ( ( TIM2_FREQUENCY / (1000 * output_frequency_Hz) ) - 1 );
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <prescaler_for_frequency+0x34>)
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
	}
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	0280de80 	.word	0x0280de80

08000cf8 <pause_buzzer>:

// Pause the buzzer noise indefinitely
void pause_buzzer(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_PRESCALER(&htim2, 0);
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <pause_buzzer+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200000ec 	.word	0x200000ec

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fb26 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x64>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10e      	bne.n	8000da0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9e:	e012      	b.n	8000dc6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da8:	d10d      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x68>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d11d      	bne.n	8000e3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_TIM_MspPostInit+0x68>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <HAL_TIM_MspPostInit+0x68>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <HAL_TIM_MspPostInit+0x68>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <HAL_TIM_MspPostInit+0x6c>)
 8000e36:	f000 faef 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a41      	ldr	r2, [pc, #260]	@ (8000f70 <HAL_UART_MspInit+0x124>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d14b      	bne.n	8000f06 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	4b40      	ldr	r3, [pc, #256]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a3f      	ldr	r2, [pc, #252]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a38      	ldr	r2, [pc, #224]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b32      	ldr	r3, [pc, #200]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a31      	ldr	r2, [pc, #196]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4826      	ldr	r0, [pc, #152]	@ (8000f78 <HAL_UART_MspInit+0x12c>)
 8000ee0:	f000 fa9a 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee4:	2340      	movs	r3, #64	@ 0x40
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	481f      	ldr	r0, [pc, #124]	@ (8000f7c <HAL_UART_MspInit+0x130>)
 8000f00:	f000 fa8a 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f04:	e030      	b.n	8000f68 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <HAL_UART_MspInit+0x134>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d12b      	bne.n	8000f68 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_UART_MspInit+0x128>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_UART_MspInit+0x12c>)
 8000f64:	f000 fa58 	bl	8001418 <HAL_GPIO_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	3730      	adds	r7, #48	@ 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40004400 	.word	0x40004400

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f917 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e00a      	b.n	800100a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	60ba      	str	r2, [r7, #8]
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbf0      	blt.n	8000ff4 <_read+0x12>
  }

  return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_close>:
  }
  return len;
}

int _close(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001044:	605a      	str	r2, [r3, #4]
  return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_isatty>:

int _isatty(int file)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f002 fc72 	bl	800399c <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20018000 	.word	0x20018000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200001c4 	.word	0x200001c4
 80010ec:	20000318 	.word	0x20000318

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800114c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001118:	f7ff ffea 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	@ (8001154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	@ (8001160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001142:	f002 fc31 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fa23 	bl	8000590 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001158:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 800115c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001160:	20000318 	.word	0x20000318

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f90d 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fdc0 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f917 	bl	80013fe <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f8ed 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000020 	.word	0x20000020
 8001204:	20000028 	.word	0x20000028
 8001208:	20000024 	.word	0x20000024

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000028 	.word	0x20000028
 8001230:	200001c8 	.word	0x200001c8

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001c8 	.word	0x200001c8

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	@ (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	@ 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a52      	ldr	r2, [pc, #328]	@ (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	@ (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	@ (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	@ (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	@ (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b38      	ldr	r3, [pc, #224]	@ (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a2f      	ldr	r2, [pc, #188]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a24      	ldr	r2, [pc, #144]	@ (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1a      	ldr	r2, [pc, #104]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e267      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d075      	beq.n	800185e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001772:	4b88      	ldr	r3, [pc, #544]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d00c      	beq.n	8001798 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b85      	ldr	r3, [pc, #532]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001786:	2b08      	cmp	r3, #8
 8001788:	d112      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178a:	4b82      	ldr	r3, [pc, #520]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001796:	d10b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	4b7e      	ldr	r3, [pc, #504]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d05b      	beq.n	800185c <HAL_RCC_OscConfig+0x108>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d157      	bne.n	800185c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e242      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x74>
 80017ba:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a75      	ldr	r2, [pc, #468]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b70      	ldr	r3, [pc, #448]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017ec:	4b69      	ldr	r3, [pc, #420]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a68      	ldr	r2, [pc, #416]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a65      	ldr	r2, [pc, #404]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fd12 	bl	8001234 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fd0e 	bl	8001234 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e207      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xc0>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fcfe 	bl	8001234 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fcfa 	bl	8001234 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1f3      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0xe8>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186a:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1c7      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4937      	ldr	r1, [pc, #220]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fcb3 	bl	8001234 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fcaf 	bl	8001234 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1a8      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4925      	ldr	r1, [pc, #148]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fc92 	bl	8001234 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fc8e 	bl	8001234 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e187      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d036      	beq.n	80019ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fc72 	bl	8001234 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fc6e 	bl	8001234 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e167      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x200>
 8001972:	e01b      	b.n	80019ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fc5b 	bl	8001234 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	e00e      	b.n	80019a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fc57 	bl	8001234 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d907      	bls.n	80019a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e150      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000
 800199c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ea      	bne.n	8001982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8097 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b81      	ldr	r3, [pc, #516]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b77      	ldr	r3, [pc, #476]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f6:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a73      	ldr	r2, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fc17 	bl	8001234 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff fc13 	bl	8001234 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e10c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2ea>
 8001a30:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	4a63      	ldr	r2, [pc, #396]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x30c>
 8001a46:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a52:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a56:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a60:	4b58      	ldr	r3, [pc, #352]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6c:	4b55      	ldr	r3, [pc, #340]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a70:	4a54      	ldr	r2, [pc, #336]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a72:	f023 0304 	bic.w	r3, r3, #4
 8001a76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fbd8 	bl	8001234 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fbd4 	bl	8001234 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0cb      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ee      	beq.n	8001a88 <HAL_RCC_OscConfig+0x334>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fbc2 	bl	8001234 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fbbe 	bl	8001234 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0b5      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ee      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a38      	ldr	r2, [pc, #224]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a1 	beq.w	8001c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d05c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d141      	bne.n	8001b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb92 	bl	8001234 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff fb8e 	bl	8001234 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e087      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	491b      	ldr	r1, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb67 	bl	8001234 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fb63 	bl	8001234 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e05c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x416>
 8001b88:	e054      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb50 	bl	8001234 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fb4c 	bl	8001234 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e045      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x444>
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e038      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x4ec>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d028      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d121      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0cc      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b68      	ldr	r3, [pc, #416]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d90c      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d044      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d119      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e067      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4934      	ldr	r1, [pc, #208]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d34:	f7ff fa7e 	bl	8001234 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7ff fa7a 	bl	8001234 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20c      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f9de 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	080045a8 	.word	0x080045a8
 8001e08:	20000020 	.word	0x20000020
 8001e0c:	20000024 	.word	0x20000024

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b094      	sub	sp, #80	@ 0x50
 8001e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e28:	4b79      	ldr	r3, [pc, #484]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d00d      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x40>
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f200 80e1 	bhi.w	8001ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e42:	e0db      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b73      	ldr	r3, [pc, #460]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e48:	e0db      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b73      	ldr	r3, [pc, #460]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e4e:	e0d8      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e50:	4b6f      	ldr	r3, [pc, #444]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b6a      	ldr	r3, [pc, #424]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e82:	4622      	mov	r2, r4
 8001e84:	462b      	mov	r3, r5
 8001e86:	f04f 0000 	mov.w	r0, #0
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	0159      	lsls	r1, r3, #5
 8001e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e94:	0150      	lsls	r0, r2, #5
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	1a51      	subs	r1, r2, r1
 8001e9e:	6139      	str	r1, [r7, #16]
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	4651      	mov	r1, sl
 8001eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ebe:	4651      	mov	r1, sl
 8001ec0:	018a      	lsls	r2, r1, #6
 8001ec2:	4651      	mov	r1, sl
 8001ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec8:	4659      	mov	r1, fp
 8001eca:	eb63 0901 	sbc.w	r9, r3, r1
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	eb18 0303 	adds.w	r3, r8, r3
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	462b      	mov	r3, r5
 8001ef0:	eb49 0303 	adc.w	r3, r9, r3
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f02:	4629      	mov	r1, r5
 8001f04:	024b      	lsls	r3, r1, #9
 8001f06:	4621      	mov	r1, r4
 8001f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	024a      	lsls	r2, r1, #9
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f16:	2200      	movs	r2, #0
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f20:	f7fe f9be 	bl	80002a0 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4613      	mov	r3, r2
 8001f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f2c:	e058      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	2200      	movs	r2, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	4611      	mov	r1, r2
 8001f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	0159      	lsls	r1, r3, #5
 8001f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f5a:	0150      	lsls	r0, r2, #5
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4641      	mov	r1, r8
 8001f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f80:	ebb2 040a 	subs.w	r4, r2, sl
 8001f84:	eb63 050b 	sbc.w	r5, r3, fp
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	00eb      	lsls	r3, r5, #3
 8001f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f96:	00e2      	lsls	r2, r4, #3
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	18e3      	adds	r3, r4, r3
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	eb45 0303 	adc.w	r3, r5, r3
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	028b      	lsls	r3, r1, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	028a      	lsls	r2, r1, #10
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	61fa      	str	r2, [r7, #28]
 8001fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd4:	f7fe f964 	bl	80002a0 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002004:	4618      	mov	r0, r3
 8002006:	3750      	adds	r7, #80	@ 0x50
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	00f42400 	.word	0x00f42400
 8002018:	007a1200 	.word	0x007a1200

0800201c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCC_GetHCLKFreq+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000020 	.word	0x20000020

08002034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002038:	f7ff fff0 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	080045b8 	.word	0x080045b8

0800205c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002060:	f7ff ffdc 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0b5b      	lsrs	r3, r3, #13
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	@ (8002080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	080045b8 	.word	0x080045b8

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fe60 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fb1c 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e03c      	b.n	80021b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_TIM_Base_Start+0xa0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_TIM_Base_Start+0x5c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d013      	beq.n	8002180 <HAL_TIM_Base_Start+0x5c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1a      	ldr	r2, [pc, #104]	@ (80021c8 <HAL_TIM_Base_Start+0xa4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIM_Base_Start+0x5c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_TIM_Base_Start+0xa8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIM_Base_Start+0x5c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_TIM_Base_Start+0xac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_Base_Start+0x5c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_TIM_Base_Start+0xb0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d010      	beq.n	80021b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	e007      	b.n	80021b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40014000 	.word	0x40014000

080021d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f839 	bl	8002276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fa72 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_TIM_PWM_Start+0x24>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e022      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d109      	bne.n	80022ca <HAL_TIM_PWM_Start+0x3e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	e015      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d109      	bne.n	80022e4 <HAL_TIM_PWM_Start+0x58>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e008      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e068      	b.n	80023d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start+0x82>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800230c:	e013      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d104      	bne.n	800231e <HAL_TIM_PWM_Start+0x92>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800231c:	e00b      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_TIM_PWM_Start+0xa2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800232c:	e003      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fc90 	bl	8002c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <HAL_TIM_PWM_Start+0x14c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d107      	bne.n	800235e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_TIM_PWM_Start+0x14c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d018      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002370:	d013      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <HAL_TIM_PWM_Start+0x150>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00e      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_TIM_PWM_Start+0x154>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a16      	ldr	r2, [pc, #88]	@ (80023e4 <HAL_TIM_PWM_Start+0x158>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <HAL_TIM_PWM_Start+0x15c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d111      	bne.n	80023be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d010      	beq.n	80023ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e007      	b.n	80023ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	40014000 	.word	0x40014000

080023ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002406:	2302      	movs	r3, #2
 8002408:	e0ae      	b.n	8002568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	f200 809f 	bhi.w	8002558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002455 	.word	0x08002455
 8002424:	08002559 	.word	0x08002559
 8002428:	08002559 	.word	0x08002559
 800242c:	08002559 	.word	0x08002559
 8002430:	08002495 	.word	0x08002495
 8002434:	08002559 	.word	0x08002559
 8002438:	08002559 	.word	0x08002559
 800243c:	08002559 	.word	0x08002559
 8002440:	080024d7 	.word	0x080024d7
 8002444:	08002559 	.word	0x08002559
 8002448:	08002559 	.word	0x08002559
 800244c:	08002559 	.word	0x08002559
 8002450:	08002517 	.word	0x08002517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f9dc 	bl	8002818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6999      	ldr	r1, [r3, #24]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	619a      	str	r2, [r3, #24]
      break;
 8002492:	e064      	b.n	800255e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fa22 	bl	80028e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6999      	ldr	r1, [r3, #24]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	021a      	lsls	r2, r3, #8
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	619a      	str	r2, [r3, #24]
      break;
 80024d4:	e043      	b.n	800255e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fa6d 	bl	80029bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0208 	orr.w	r2, r2, #8
 80024f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0204 	bic.w	r2, r2, #4
 8002500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69d9      	ldr	r1, [r3, #28]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	61da      	str	r2, [r3, #28]
      break;
 8002514:	e023      	b.n	800255e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fab7 	bl	8002a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69d9      	ldr	r1, [r3, #28]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	61da      	str	r2, [r3, #28]
      break;
 8002556:	e002      	b.n	800255e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
      break;
 800255c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002566:	7dfb      	ldrb	r3, [r7, #23]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_TIM_ConfigClockSource+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e0b4      	b.n	80026f6 <HAL_TIM_ConfigClockSource+0x186>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c4:	d03e      	beq.n	8002644 <HAL_TIM_ConfigClockSource+0xd4>
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ca:	f200 8087 	bhi.w	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d2:	f000 8086 	beq.w	80026e2 <HAL_TIM_ConfigClockSource+0x172>
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025da:	d87f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b70      	cmp	r3, #112	@ 0x70
 80025de:	d01a      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xa6>
 80025e0:	2b70      	cmp	r3, #112	@ 0x70
 80025e2:	d87b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b60      	cmp	r3, #96	@ 0x60
 80025e6:	d050      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x11a>
 80025e8:	2b60      	cmp	r3, #96	@ 0x60
 80025ea:	d877      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b50      	cmp	r3, #80	@ 0x50
 80025ee:	d03c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xfa>
 80025f0:	2b50      	cmp	r3, #80	@ 0x50
 80025f2:	d873      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b40      	cmp	r3, #64	@ 0x40
 80025f6:	d058      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x13a>
 80025f8:	2b40      	cmp	r3, #64	@ 0x40
 80025fa:	d86f      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b30      	cmp	r3, #48	@ 0x30
 80025fe:	d064      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b30      	cmp	r3, #48	@ 0x30
 8002602:	d86b      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d060      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d867      	bhi.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d05c      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	2b10      	cmp	r3, #16
 8002612:	d05a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	e062      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002626:	f000 fafd 	bl	8002c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
      break;
 8002642:	e04f      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002654:	f000 fae6 	bl	8002c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002666:	609a      	str	r2, [r3, #8]
      break;
 8002668:	e03c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	461a      	mov	r2, r3
 8002678:	f000 fa5a 	bl	8002b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2150      	movs	r1, #80	@ 0x50
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fab3 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 8002688:	e02c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	461a      	mov	r2, r3
 8002698:	f000 fa79 	bl	8002b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2160      	movs	r1, #96	@ 0x60
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 faa3 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80026a8:	e01c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	461a      	mov	r2, r3
 80026b8:	f000 fa3a 	bl	8002b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2140      	movs	r1, #64	@ 0x40
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fa93 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80026c8:	e00c      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fa8a 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80026da:	e003      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e000      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3a      	ldr	r2, [pc, #232]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a37      	ldr	r2, [pc, #220]	@ (8002800 <TIM_Base_SetConfig+0x100>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a36      	ldr	r2, [pc, #216]	@ (8002804 <TIM_Base_SetConfig+0x104>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a35      	ldr	r2, [pc, #212]	@ (8002808 <TIM_Base_SetConfig+0x108>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <TIM_Base_SetConfig+0x100>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a27      	ldr	r2, [pc, #156]	@ (8002804 <TIM_Base_SetConfig+0x104>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	@ (8002808 <TIM_Base_SetConfig+0x108>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a25      	ldr	r2, [pc, #148]	@ (800280c <TIM_Base_SetConfig+0x10c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <TIM_Base_SetConfig+0x110>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <TIM_Base_SetConfig+0x114>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d103      	bne.n	80027d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f023 0201 	bic.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]
  }
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800

08002818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f023 0201 	bic.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1c      	ldr	r2, [pc, #112]	@ (80028e0 <TIM_OC1_SetConfig+0xc8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10c      	bne.n	800288e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0308 	bic.w	r3, r3, #8
 800287a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <TIM_OC1_SetConfig+0xc8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800289c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40010000 	.word	0x40010000

080028e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 0210 	bic.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0320 	bic.w	r3, r3, #32
 800292e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a1e      	ldr	r2, [pc, #120]	@ (80029b8 <TIM_OC2_SetConfig+0xd4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10d      	bne.n	8002960 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800294a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800295e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <TIM_OC2_SetConfig+0xd4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d113      	bne.n	8002990 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800296e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000

080029bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <TIM_OC3_SetConfig+0xd0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10d      	bne.n	8002a36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <TIM_OC3_SetConfig+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d113      	bne.n	8002a66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	621a      	str	r2, [r3, #32]
}
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40010000 	.word	0x40010000

08002a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <TIM_OC4_SetConfig+0x9c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	019b      	lsls	r3, r3, #6
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000

08002b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0201 	bic.w	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 030a 	bic.w	r3, r3, #10
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b087      	sub	sp, #28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 0210 	bic.w	r2, r3, #16
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f043 0307 	orr.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e050      	b.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d018      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d14:	d013      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a13      	ldr	r2, [pc, #76]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10c      	bne.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40014000 	.word	0x40014000

08002d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e042      	b.n	8002e24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe f84a 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	@ 0x24
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fa09 	bl	80031e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d175      	bne.n	8002f38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Transmit+0x2c>
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e06e      	b.n	8002f3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2221      	movs	r2, #33	@ 0x21
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f9e3 	bl	8001234 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e84:	d108      	bne.n	8002e98 <HAL_UART_Transmit+0x6c>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ea0:	e02e      	b.n	8002f00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2180      	movs	r1, #128	@ 0x80
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f8df 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e03a      	b.n	8002f3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3302      	adds	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e007      	b.n	8002ef2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1cb      	bne.n	8002ea2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	@ 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8ab 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e006      	b.n	8002f3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08a      	sub	sp, #40	@ 0x28
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 8081 	bne.w	8003066 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_UART_Receive+0x2e>
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e079      	b.n	8003068 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	@ 0x22
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f88:	f7fe f954 	bl	8001234 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa2:	d108      	bne.n	8002fb6 <HAL_UART_Receive+0x74>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e003      	b.n	8002fbe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002fbe:	e047      	b.n	8003050 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2120      	movs	r1, #32
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f850 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e042      	b.n	8003068 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e01f      	b.n	8003042 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d007      	beq.n	800301c <HAL_UART_Receive+0xda>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_UART_Receive+0xe8>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1b2      	bne.n	8002fc0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003080:	e03b      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d037      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe f8d3 	bl	8001234 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e03a      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d023      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d020      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d01d      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d116      	bne.n	80030fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f81d 	bl	8003122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2208      	movs	r2, #8
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0b4      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b095      	sub	sp, #84	@ 0x54
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800314a:	643a      	str	r2, [r7, #64]	@ 0x40
 800314c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e5      	bne.n	800312a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	61fb      	str	r3, [r7, #28]
   return(result);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800317e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e5      	bne.n	800315e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	2b01      	cmp	r3, #1
 8003198:	d119      	bne.n	80031ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ba:	61ba      	str	r2, [r7, #24]
 80031bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	613b      	str	r3, [r7, #16]
   return(result);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031dc:	bf00      	nop
 80031de:	3754      	adds	r7, #84	@ 0x54
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b0c0      	sub	sp, #256	@ 0x100
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	68d9      	ldr	r1, [r3, #12]
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	ea40 0301 	orr.w	r3, r0, r1
 8003210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	431a      	orrs	r2, r3
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003240:	f021 010c 	bic.w	r1, r1, #12
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800324e:	430b      	orrs	r3, r1
 8003250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	6999      	ldr	r1, [r3, #24]
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	ea40 0301 	orr.w	r3, r0, r1
 800326e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b8f      	ldr	r3, [pc, #572]	@ (80034b4 <UART_SetConfig+0x2cc>)
 8003278:	429a      	cmp	r2, r3
 800327a:	d005      	beq.n	8003288 <UART_SetConfig+0xa0>
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b8d      	ldr	r3, [pc, #564]	@ (80034b8 <UART_SetConfig+0x2d0>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d104      	bne.n	8003292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7fe fee8 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 800328c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003290:	e003      	b.n	800329a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003292:	f7fe fecf 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003296:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a4:	f040 810c 	bne.w	80034c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032c2:	415b      	adcs	r3, r3
 80032c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032ca:	4621      	mov	r1, r4
 80032cc:	eb12 0801 	adds.w	r8, r2, r1
 80032d0:	4629      	mov	r1, r5
 80032d2:	eb43 0901 	adc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032f8:	462b      	mov	r3, r5
 80032fa:	eb49 0303 	adc.w	r3, r9, r3
 80032fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800330e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003316:	460b      	mov	r3, r1
 8003318:	18db      	adds	r3, r3, r3
 800331a:	653b      	str	r3, [r7, #80]	@ 0x50
 800331c:	4613      	mov	r3, r2
 800331e:	eb42 0303 	adc.w	r3, r2, r3
 8003322:	657b      	str	r3, [r7, #84]	@ 0x54
 8003324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800332c:	f7fc ffb8 	bl	80002a0 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <UART_SetConfig+0x2d4>)
 8003336:	fba3 2302 	umull	r2, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	011c      	lsls	r4, r3, #4
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003348:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800334c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	1891      	adds	r1, r2, r2
 8003356:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003358:	415b      	adcs	r3, r3
 800335a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800335c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003360:	4641      	mov	r1, r8
 8003362:	eb12 0a01 	adds.w	sl, r2, r1
 8003366:	4649      	mov	r1, r9
 8003368:	eb43 0b01 	adc.w	fp, r3, r1
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800337c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003380:	4692      	mov	sl, r2
 8003382:	469b      	mov	fp, r3
 8003384:	4643      	mov	r3, r8
 8003386:	eb1a 0303 	adds.w	r3, sl, r3
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800338e:	464b      	mov	r3, r9
 8003390:	eb4b 0303 	adc.w	r3, fp, r3
 8003394:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033ac:	460b      	mov	r3, r1
 80033ae:	18db      	adds	r3, r3, r3
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b2:	4613      	mov	r3, r2
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033c2:	f7fc ff6d 	bl	80002a0 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	4b3b      	ldr	r3, [pc, #236]	@ (80034bc <UART_SetConfig+0x2d4>)
 80033ce:	fba3 2301 	umull	r2, r3, r3, r1
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2264      	movs	r2, #100	@ 0x64
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	1acb      	subs	r3, r1, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <UART_SetConfig+0x2d4>)
 80033e4:	fba3 2302 	umull	r2, r3, r3, r2
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033f0:	441c      	add	r4, r3
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800340c:	415b      	adcs	r3, r3
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003414:	4641      	mov	r1, r8
 8003416:	1851      	adds	r1, r2, r1
 8003418:	6339      	str	r1, [r7, #48]	@ 0x30
 800341a:	4649      	mov	r1, r9
 800341c:	414b      	adcs	r3, r1
 800341e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800342c:	4659      	mov	r1, fp
 800342e:	00cb      	lsls	r3, r1, #3
 8003430:	4651      	mov	r1, sl
 8003432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003436:	4651      	mov	r1, sl
 8003438:	00ca      	lsls	r2, r1, #3
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	4603      	mov	r3, r0
 8003440:	4642      	mov	r2, r8
 8003442:	189b      	adds	r3, r3, r2
 8003444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003448:	464b      	mov	r3, r9
 800344a:	460a      	mov	r2, r1
 800344c:	eb42 0303 	adc.w	r3, r2, r3
 8003450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003460:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003468:	460b      	mov	r3, r1
 800346a:	18db      	adds	r3, r3, r3
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346e:	4613      	mov	r3, r2
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800347a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800347e:	f7fc ff0f 	bl	80002a0 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <UART_SetConfig+0x2d4>)
 8003488:	fba3 1302 	umull	r1, r3, r3, r2
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	2164      	movs	r1, #100	@ 0x64
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	3332      	adds	r3, #50	@ 0x32
 800349a:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <UART_SetConfig+0x2d4>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	f003 0207 	and.w	r2, r3, #7
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4422      	add	r2, r4
 80034ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b0:	e106      	b.n	80036c0 <UART_SetConfig+0x4d8>
 80034b2:	bf00      	nop
 80034b4:	40011000 	.word	0x40011000
 80034b8:	40011400 	.word	0x40011400
 80034bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034d2:	4642      	mov	r2, r8
 80034d4:	464b      	mov	r3, r9
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	6239      	str	r1, [r7, #32]
 80034da:	415b      	adcs	r3, r3
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034e2:	4641      	mov	r1, r8
 80034e4:	1854      	adds	r4, r2, r1
 80034e6:	4649      	mov	r1, r9
 80034e8:	eb43 0501 	adc.w	r5, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	00eb      	lsls	r3, r5, #3
 80034f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fa:	00e2      	lsls	r2, r4, #3
 80034fc:	4614      	mov	r4, r2
 80034fe:	461d      	mov	r5, r3
 8003500:	4643      	mov	r3, r8
 8003502:	18e3      	adds	r3, r4, r3
 8003504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003508:	464b      	mov	r3, r9
 800350a:	eb45 0303 	adc.w	r3, r5, r3
 800350e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800351e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800352e:	4629      	mov	r1, r5
 8003530:	008b      	lsls	r3, r1, #2
 8003532:	4621      	mov	r1, r4
 8003534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003538:	4621      	mov	r1, r4
 800353a:	008a      	lsls	r2, r1, #2
 800353c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003540:	f7fc feae 	bl	80002a0 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4b60      	ldr	r3, [pc, #384]	@ (80036cc <UART_SetConfig+0x4e4>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	011c      	lsls	r4, r3, #4
 8003552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800355c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	61b9      	str	r1, [r7, #24]
 800356c:	415b      	adcs	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003574:	4641      	mov	r1, r8
 8003576:	1851      	adds	r1, r2, r1
 8003578:	6139      	str	r1, [r7, #16]
 800357a:	4649      	mov	r1, r9
 800357c:	414b      	adcs	r3, r1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800358c:	4659      	mov	r1, fp
 800358e:	00cb      	lsls	r3, r1, #3
 8003590:	4651      	mov	r1, sl
 8003592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003596:	4651      	mov	r1, sl
 8003598:	00ca      	lsls	r2, r1, #3
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	4642      	mov	r2, r8
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a8:	464b      	mov	r3, r9
 80035aa:	460a      	mov	r2, r1
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035cc:	4649      	mov	r1, r9
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d6:	4641      	mov	r1, r8
 80035d8:	008a      	lsls	r2, r1, #2
 80035da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035de:	f7fc fe5f 	bl	80002a0 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <UART_SetConfig+0x4e4>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2264      	movs	r2, #100	@ 0x64
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	@ 0x32
 80035fc:	4a33      	ldr	r2, [pc, #204]	@ (80036cc <UART_SetConfig+0x4e4>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003608:	441c      	add	r4, r3
 800360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800360e:	2200      	movs	r2, #0
 8003610:	673b      	str	r3, [r7, #112]	@ 0x70
 8003612:	677a      	str	r2, [r7, #116]	@ 0x74
 8003614:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	415b      	adcs	r3, r3
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800365a:	464b      	mov	r3, r9
 800365c:	460a      	mov	r2, r1
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	663b      	str	r3, [r7, #96]	@ 0x60
 800366e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800367c:	4649      	mov	r1, r9
 800367e:	008b      	lsls	r3, r1, #2
 8003680:	4641      	mov	r1, r8
 8003682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003686:	4641      	mov	r1, r8
 8003688:	008a      	lsls	r2, r1, #2
 800368a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800368e:	f7fc fe07 	bl	80002a0 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <UART_SetConfig+0x4e4>)
 8003698:	fba3 1302 	umull	r1, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	2164      	movs	r1, #100	@ 0x64
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	3332      	adds	r3, #50	@ 0x32
 80036aa:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <UART_SetConfig+0x4e4>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4422      	add	r2, r4
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036c6:	46bd      	mov	sp, r7
 80036c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <std>:
 80036d0:	2300      	movs	r3, #0
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	e9c0 3300 	strd	r3, r3, [r0]
 80036da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036de:	6083      	str	r3, [r0, #8]
 80036e0:	8181      	strh	r1, [r0, #12]
 80036e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80036e4:	81c2      	strh	r2, [r0, #14]
 80036e6:	6183      	str	r3, [r0, #24]
 80036e8:	4619      	mov	r1, r3
 80036ea:	2208      	movs	r2, #8
 80036ec:	305c      	adds	r0, #92	@ 0x5c
 80036ee:	f000 f906 	bl	80038fe <memset>
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <std+0x58>)
 80036f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <std+0x5c>)
 80036f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <std+0x60>)
 80036fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <std+0x64>)
 8003700:	6323      	str	r3, [r4, #48]	@ 0x30
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <std+0x68>)
 8003704:	6224      	str	r4, [r4, #32]
 8003706:	429c      	cmp	r4, r3
 8003708:	d006      	beq.n	8003718 <std+0x48>
 800370a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800370e:	4294      	cmp	r4, r2
 8003710:	d002      	beq.n	8003718 <std+0x48>
 8003712:	33d0      	adds	r3, #208	@ 0xd0
 8003714:	429c      	cmp	r4, r3
 8003716:	d105      	bne.n	8003724 <std+0x54>
 8003718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800371c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003720:	f000 b966 	b.w	80039f0 <__retarget_lock_init_recursive>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	08003879 	.word	0x08003879
 800372c:	0800389b 	.word	0x0800389b
 8003730:	080038d3 	.word	0x080038d3
 8003734:	080038f7 	.word	0x080038f7
 8003738:	200001cc 	.word	0x200001cc

0800373c <stdio_exit_handler>:
 800373c:	4a02      	ldr	r2, [pc, #8]	@ (8003748 <stdio_exit_handler+0xc>)
 800373e:	4903      	ldr	r1, [pc, #12]	@ (800374c <stdio_exit_handler+0x10>)
 8003740:	4803      	ldr	r0, [pc, #12]	@ (8003750 <stdio_exit_handler+0x14>)
 8003742:	f000 b869 	b.w	8003818 <_fwalk_sglue>
 8003746:	bf00      	nop
 8003748:	2000002c 	.word	0x2000002c
 800374c:	080042a1 	.word	0x080042a1
 8003750:	2000003c 	.word	0x2000003c

08003754 <cleanup_stdio>:
 8003754:	6841      	ldr	r1, [r0, #4]
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <cleanup_stdio+0x34>)
 8003758:	4299      	cmp	r1, r3
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	d001      	beq.n	8003764 <cleanup_stdio+0x10>
 8003760:	f000 fd9e 	bl	80042a0 <_fflush_r>
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <cleanup_stdio+0x38>)
 8003768:	4299      	cmp	r1, r3
 800376a:	d002      	beq.n	8003772 <cleanup_stdio+0x1e>
 800376c:	4620      	mov	r0, r4
 800376e:	f000 fd97 	bl	80042a0 <_fflush_r>
 8003772:	68e1      	ldr	r1, [r4, #12]
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <cleanup_stdio+0x3c>)
 8003776:	4299      	cmp	r1, r3
 8003778:	d004      	beq.n	8003784 <cleanup_stdio+0x30>
 800377a:	4620      	mov	r0, r4
 800377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003780:	f000 bd8e 	b.w	80042a0 <_fflush_r>
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	200001cc 	.word	0x200001cc
 800378c:	20000234 	.word	0x20000234
 8003790:	2000029c 	.word	0x2000029c

08003794 <global_stdio_init.part.0>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <global_stdio_init.part.0+0x30>)
 8003798:	4c0b      	ldr	r4, [pc, #44]	@ (80037c8 <global_stdio_init.part.0+0x34>)
 800379a:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <global_stdio_init.part.0+0x38>)
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4620      	mov	r0, r4
 80037a0:	2200      	movs	r2, #0
 80037a2:	2104      	movs	r1, #4
 80037a4:	f7ff ff94 	bl	80036d0 <std>
 80037a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037ac:	2201      	movs	r2, #1
 80037ae:	2109      	movs	r1, #9
 80037b0:	f7ff ff8e 	bl	80036d0 <std>
 80037b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037b8:	2202      	movs	r2, #2
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037be:	2112      	movs	r1, #18
 80037c0:	f7ff bf86 	b.w	80036d0 <std>
 80037c4:	20000304 	.word	0x20000304
 80037c8:	200001cc 	.word	0x200001cc
 80037cc:	0800373d 	.word	0x0800373d

080037d0 <__sfp_lock_acquire>:
 80037d0:	4801      	ldr	r0, [pc, #4]	@ (80037d8 <__sfp_lock_acquire+0x8>)
 80037d2:	f000 b90e 	b.w	80039f2 <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	2000030d 	.word	0x2000030d

080037dc <__sfp_lock_release>:
 80037dc:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <__sfp_lock_release+0x8>)
 80037de:	f000 b909 	b.w	80039f4 <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000030d 	.word	0x2000030d

080037e8 <__sinit>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	f7ff fff0 	bl	80037d0 <__sfp_lock_acquire>
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	b11b      	cbz	r3, 80037fc <__sinit+0x14>
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f7ff bff0 	b.w	80037dc <__sfp_lock_release>
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__sinit+0x28>)
 80037fe:	6223      	str	r3, [r4, #32]
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <__sinit+0x2c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f5      	bne.n	80037f4 <__sinit+0xc>
 8003808:	f7ff ffc4 	bl	8003794 <global_stdio_init.part.0>
 800380c:	e7f2      	b.n	80037f4 <__sinit+0xc>
 800380e:	bf00      	nop
 8003810:	08003755 	.word	0x08003755
 8003814:	20000304 	.word	0x20000304

08003818 <_fwalk_sglue>:
 8003818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800381c:	4607      	mov	r7, r0
 800381e:	4688      	mov	r8, r1
 8003820:	4614      	mov	r4, r2
 8003822:	2600      	movs	r6, #0
 8003824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003828:	f1b9 0901 	subs.w	r9, r9, #1
 800382c:	d505      	bpl.n	800383a <_fwalk_sglue+0x22>
 800382e:	6824      	ldr	r4, [r4, #0]
 8003830:	2c00      	cmp	r4, #0
 8003832:	d1f7      	bne.n	8003824 <_fwalk_sglue+0xc>
 8003834:	4630      	mov	r0, r6
 8003836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d907      	bls.n	8003850 <_fwalk_sglue+0x38>
 8003840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003844:	3301      	adds	r3, #1
 8003846:	d003      	beq.n	8003850 <_fwalk_sglue+0x38>
 8003848:	4629      	mov	r1, r5
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	4306      	orrs	r6, r0
 8003850:	3568      	adds	r5, #104	@ 0x68
 8003852:	e7e9      	b.n	8003828 <_fwalk_sglue+0x10>

08003854 <iprintf>:
 8003854:	b40f      	push	{r0, r1, r2, r3}
 8003856:	b507      	push	{r0, r1, r2, lr}
 8003858:	4906      	ldr	r1, [pc, #24]	@ (8003874 <iprintf+0x20>)
 800385a:	ab04      	add	r3, sp, #16
 800385c:	6808      	ldr	r0, [r1, #0]
 800385e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003862:	6881      	ldr	r1, [r0, #8]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	f000 f9f1 	bl	8003c4c <_vfiprintf_r>
 800386a:	b003      	add	sp, #12
 800386c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003870:	b004      	add	sp, #16
 8003872:	4770      	bx	lr
 8003874:	20000038 	.word	0x20000038

08003878 <__sread>:
 8003878:	b510      	push	{r4, lr}
 800387a:	460c      	mov	r4, r1
 800387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003880:	f000 f868 	bl	8003954 <_read_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	bfab      	itete	ge
 8003888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800388a:	89a3      	ldrhlt	r3, [r4, #12]
 800388c:	181b      	addge	r3, r3, r0
 800388e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003892:	bfac      	ite	ge
 8003894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003896:	81a3      	strhlt	r3, [r4, #12]
 8003898:	bd10      	pop	{r4, pc}

0800389a <__swrite>:
 800389a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389e:	461f      	mov	r7, r3
 80038a0:	898b      	ldrh	r3, [r1, #12]
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	4605      	mov	r5, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4616      	mov	r6, r2
 80038aa:	d505      	bpl.n	80038b8 <__swrite+0x1e>
 80038ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b0:	2302      	movs	r3, #2
 80038b2:	2200      	movs	r2, #0
 80038b4:	f000 f83c 	bl	8003930 <_lseek_r>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	4632      	mov	r2, r6
 80038c6:	463b      	mov	r3, r7
 80038c8:	4628      	mov	r0, r5
 80038ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ce:	f000 b853 	b.w	8003978 <_write_r>

080038d2 <__sseek>:
 80038d2:	b510      	push	{r4, lr}
 80038d4:	460c      	mov	r4, r1
 80038d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038da:	f000 f829 	bl	8003930 <_lseek_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	bf15      	itete	ne
 80038e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038ee:	81a3      	strheq	r3, [r4, #12]
 80038f0:	bf18      	it	ne
 80038f2:	81a3      	strhne	r3, [r4, #12]
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <__sclose>:
 80038f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fa:	f000 b809 	b.w	8003910 <_close_r>

080038fe <memset>:
 80038fe:	4402      	add	r2, r0
 8003900:	4603      	mov	r3, r0
 8003902:	4293      	cmp	r3, r2
 8003904:	d100      	bne.n	8003908 <memset+0xa>
 8003906:	4770      	bx	lr
 8003908:	f803 1b01 	strb.w	r1, [r3], #1
 800390c:	e7f9      	b.n	8003902 <memset+0x4>
	...

08003910 <_close_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d06      	ldr	r5, [pc, #24]	@ (800392c <_close_r+0x1c>)
 8003914:	2300      	movs	r3, #0
 8003916:	4604      	mov	r4, r0
 8003918:	4608      	mov	r0, r1
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	f7fd fb7e 	bl	800101c <_close>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_close_r+0x1a>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_close_r+0x1a>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	20000308 	.word	0x20000308

08003930 <_lseek_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_lseek_r+0x20>)
 8003934:	4604      	mov	r4, r0
 8003936:	4608      	mov	r0, r1
 8003938:	4611      	mov	r1, r2
 800393a:	2200      	movs	r2, #0
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fd fb93 	bl	800106a <_lseek>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_lseek_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_lseek_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000308 	.word	0x20000308

08003954 <_read_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_read_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fd fb3d 	bl	8000fe2 <_read>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_read_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_read_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	20000308 	.word	0x20000308

08003978 <_write_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	@ (8003998 <_write_r+0x20>)
 800397c:	4604      	mov	r4, r0
 800397e:	4608      	mov	r0, r1
 8003980:	4611      	mov	r1, r2
 8003982:	2200      	movs	r2, #0
 8003984:	602a      	str	r2, [r5, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fd f8be 	bl	8000b08 <_write>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_write_r+0x1e>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_write_r+0x1e>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000308 	.word	0x20000308

0800399c <__errno>:
 800399c:	4b01      	ldr	r3, [pc, #4]	@ (80039a4 <__errno+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000038 	.word	0x20000038

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4d0d      	ldr	r5, [pc, #52]	@ (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	@ (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2600      	movs	r6, #0
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4d0b      	ldr	r5, [pc, #44]	@ (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	@ (80039ec <__libc_init_array+0x44>)
 80039bc:	f000 fdc0 	bl	8004540 <_init>
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2600      	movs	r6, #0
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	080045fc 	.word	0x080045fc
 80039e4:	080045fc 	.word	0x080045fc
 80039e8:	080045fc 	.word	0x080045fc
 80039ec:	08004600 	.word	0x08004600

080039f0 <__retarget_lock_init_recursive>:
 80039f0:	4770      	bx	lr

080039f2 <__retarget_lock_acquire_recursive>:
 80039f2:	4770      	bx	lr

080039f4 <__retarget_lock_release_recursive>:
 80039f4:	4770      	bx	lr

080039f6 <strcpy>:
 80039f6:	4603      	mov	r3, r0
 80039f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fc:	f803 2b01 	strb.w	r2, [r3], #1
 8003a00:	2a00      	cmp	r2, #0
 8003a02:	d1f9      	bne.n	80039f8 <strcpy+0x2>
 8003a04:	4770      	bx	lr
	...

08003a08 <_free_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	d041      	beq.n	8003a94 <_free_r+0x8c>
 8003a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a14:	1f0c      	subs	r4, r1, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bfb8      	it	lt
 8003a1a:	18e4      	addlt	r4, r4, r3
 8003a1c:	f000 f8e0 	bl	8003be0 <__malloc_lock>
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <_free_r+0x90>)
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	b933      	cbnz	r3, 8003a34 <_free_r+0x2c>
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	6014      	str	r4, [r2, #0]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a30:	f000 b8dc 	b.w	8003bec <__malloc_unlock>
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d908      	bls.n	8003a4a <_free_r+0x42>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	1821      	adds	r1, r4, r0
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf01      	itttt	eq
 8003a40:	6819      	ldreq	r1, [r3, #0]
 8003a42:	685b      	ldreq	r3, [r3, #4]
 8003a44:	1809      	addeq	r1, r1, r0
 8003a46:	6021      	streq	r1, [r4, #0]
 8003a48:	e7ed      	b.n	8003a26 <_free_r+0x1e>
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b10b      	cbz	r3, 8003a54 <_free_r+0x4c>
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d9fa      	bls.n	8003a4a <_free_r+0x42>
 8003a54:	6811      	ldr	r1, [r2, #0]
 8003a56:	1850      	adds	r0, r2, r1
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d10b      	bne.n	8003a74 <_free_r+0x6c>
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	4401      	add	r1, r0
 8003a60:	1850      	adds	r0, r2, r1
 8003a62:	4283      	cmp	r3, r0
 8003a64:	6011      	str	r1, [r2, #0]
 8003a66:	d1e0      	bne.n	8003a2a <_free_r+0x22>
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	6053      	str	r3, [r2, #4]
 8003a6e:	4408      	add	r0, r1
 8003a70:	6010      	str	r0, [r2, #0]
 8003a72:	e7da      	b.n	8003a2a <_free_r+0x22>
 8003a74:	d902      	bls.n	8003a7c <_free_r+0x74>
 8003a76:	230c      	movs	r3, #12
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	e7d6      	b.n	8003a2a <_free_r+0x22>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	1821      	adds	r1, r4, r0
 8003a80:	428b      	cmp	r3, r1
 8003a82:	bf04      	itt	eq
 8003a84:	6819      	ldreq	r1, [r3, #0]
 8003a86:	685b      	ldreq	r3, [r3, #4]
 8003a88:	6063      	str	r3, [r4, #4]
 8003a8a:	bf04      	itt	eq
 8003a8c:	1809      	addeq	r1, r1, r0
 8003a8e:	6021      	streq	r1, [r4, #0]
 8003a90:	6054      	str	r4, [r2, #4]
 8003a92:	e7ca      	b.n	8003a2a <_free_r+0x22>
 8003a94:	bd38      	pop	{r3, r4, r5, pc}
 8003a96:	bf00      	nop
 8003a98:	20000314 	.word	0x20000314

08003a9c <sbrk_aligned>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003adc <sbrk_aligned+0x40>)
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	6831      	ldr	r1, [r6, #0]
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	b911      	cbnz	r1, 8003aae <sbrk_aligned+0x12>
 8003aa8:	f000 fcb6 	bl	8004418 <_sbrk_r>
 8003aac:	6030      	str	r0, [r6, #0]
 8003aae:	4621      	mov	r1, r4
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 fcb1 	bl	8004418 <_sbrk_r>
 8003ab6:	1c43      	adds	r3, r0, #1
 8003ab8:	d103      	bne.n	8003ac2 <sbrk_aligned+0x26>
 8003aba:	f04f 34ff 	mov.w	r4, #4294967295
 8003abe:	4620      	mov	r0, r4
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	1cc4      	adds	r4, r0, #3
 8003ac4:	f024 0403 	bic.w	r4, r4, #3
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d0f8      	beq.n	8003abe <sbrk_aligned+0x22>
 8003acc:	1a21      	subs	r1, r4, r0
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 fca2 	bl	8004418 <_sbrk_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d1f2      	bne.n	8003abe <sbrk_aligned+0x22>
 8003ad8:	e7ef      	b.n	8003aba <sbrk_aligned+0x1e>
 8003ada:	bf00      	nop
 8003adc:	20000310 	.word	0x20000310

08003ae0 <_malloc_r>:
 8003ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae4:	1ccd      	adds	r5, r1, #3
 8003ae6:	f025 0503 	bic.w	r5, r5, #3
 8003aea:	3508      	adds	r5, #8
 8003aec:	2d0c      	cmp	r5, #12
 8003aee:	bf38      	it	cc
 8003af0:	250c      	movcc	r5, #12
 8003af2:	2d00      	cmp	r5, #0
 8003af4:	4606      	mov	r6, r0
 8003af6:	db01      	blt.n	8003afc <_malloc_r+0x1c>
 8003af8:	42a9      	cmp	r1, r5
 8003afa:	d904      	bls.n	8003b06 <_malloc_r+0x26>
 8003afc:	230c      	movs	r3, #12
 8003afe:	6033      	str	r3, [r6, #0]
 8003b00:	2000      	movs	r0, #0
 8003b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bdc <_malloc_r+0xfc>
 8003b0a:	f000 f869 	bl	8003be0 <__malloc_lock>
 8003b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b12:	461c      	mov	r4, r3
 8003b14:	bb44      	cbnz	r4, 8003b68 <_malloc_r+0x88>
 8003b16:	4629      	mov	r1, r5
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f7ff ffbf 	bl	8003a9c <sbrk_aligned>
 8003b1e:	1c43      	adds	r3, r0, #1
 8003b20:	4604      	mov	r4, r0
 8003b22:	d158      	bne.n	8003bd6 <_malloc_r+0xf6>
 8003b24:	f8d8 4000 	ldr.w	r4, [r8]
 8003b28:	4627      	mov	r7, r4
 8003b2a:	2f00      	cmp	r7, #0
 8003b2c:	d143      	bne.n	8003bb6 <_malloc_r+0xd6>
 8003b2e:	2c00      	cmp	r4, #0
 8003b30:	d04b      	beq.n	8003bca <_malloc_r+0xea>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	4639      	mov	r1, r7
 8003b36:	4630      	mov	r0, r6
 8003b38:	eb04 0903 	add.w	r9, r4, r3
 8003b3c:	f000 fc6c 	bl	8004418 <_sbrk_r>
 8003b40:	4581      	cmp	r9, r0
 8003b42:	d142      	bne.n	8003bca <_malloc_r+0xea>
 8003b44:	6821      	ldr	r1, [r4, #0]
 8003b46:	1a6d      	subs	r5, r5, r1
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7ff ffa6 	bl	8003a9c <sbrk_aligned>
 8003b50:	3001      	adds	r0, #1
 8003b52:	d03a      	beq.n	8003bca <_malloc_r+0xea>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	442b      	add	r3, r5
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	bb62      	cbnz	r2, 8003bbc <_malloc_r+0xdc>
 8003b62:	f8c8 7000 	str.w	r7, [r8]
 8003b66:	e00f      	b.n	8003b88 <_malloc_r+0xa8>
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	1b52      	subs	r2, r2, r5
 8003b6c:	d420      	bmi.n	8003bb0 <_malloc_r+0xd0>
 8003b6e:	2a0b      	cmp	r2, #11
 8003b70:	d917      	bls.n	8003ba2 <_malloc_r+0xc2>
 8003b72:	1961      	adds	r1, r4, r5
 8003b74:	42a3      	cmp	r3, r4
 8003b76:	6025      	str	r5, [r4, #0]
 8003b78:	bf18      	it	ne
 8003b7a:	6059      	strne	r1, [r3, #4]
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	bf08      	it	eq
 8003b80:	f8c8 1000 	streq.w	r1, [r8]
 8003b84:	5162      	str	r2, [r4, r5]
 8003b86:	604b      	str	r3, [r1, #4]
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f000 f82f 	bl	8003bec <__malloc_unlock>
 8003b8e:	f104 000b 	add.w	r0, r4, #11
 8003b92:	1d23      	adds	r3, r4, #4
 8003b94:	f020 0007 	bic.w	r0, r0, #7
 8003b98:	1ac2      	subs	r2, r0, r3
 8003b9a:	bf1c      	itt	ne
 8003b9c:	1a1b      	subne	r3, r3, r0
 8003b9e:	50a3      	strne	r3, [r4, r2]
 8003ba0:	e7af      	b.n	8003b02 <_malloc_r+0x22>
 8003ba2:	6862      	ldr	r2, [r4, #4]
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	bf0c      	ite	eq
 8003ba8:	f8c8 2000 	streq.w	r2, [r8]
 8003bac:	605a      	strne	r2, [r3, #4]
 8003bae:	e7eb      	b.n	8003b88 <_malloc_r+0xa8>
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	6864      	ldr	r4, [r4, #4]
 8003bb4:	e7ae      	b.n	8003b14 <_malloc_r+0x34>
 8003bb6:	463c      	mov	r4, r7
 8003bb8:	687f      	ldr	r7, [r7, #4]
 8003bba:	e7b6      	b.n	8003b2a <_malloc_r+0x4a>
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d1fb      	bne.n	8003bbc <_malloc_r+0xdc>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6053      	str	r3, [r2, #4]
 8003bc8:	e7de      	b.n	8003b88 <_malloc_r+0xa8>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f000 f80c 	bl	8003bec <__malloc_unlock>
 8003bd4:	e794      	b.n	8003b00 <_malloc_r+0x20>
 8003bd6:	6005      	str	r5, [r0, #0]
 8003bd8:	e7d6      	b.n	8003b88 <_malloc_r+0xa8>
 8003bda:	bf00      	nop
 8003bdc:	20000314 	.word	0x20000314

08003be0 <__malloc_lock>:
 8003be0:	4801      	ldr	r0, [pc, #4]	@ (8003be8 <__malloc_lock+0x8>)
 8003be2:	f7ff bf06 	b.w	80039f2 <__retarget_lock_acquire_recursive>
 8003be6:	bf00      	nop
 8003be8:	2000030c 	.word	0x2000030c

08003bec <__malloc_unlock>:
 8003bec:	4801      	ldr	r0, [pc, #4]	@ (8003bf4 <__malloc_unlock+0x8>)
 8003bee:	f7ff bf01 	b.w	80039f4 <__retarget_lock_release_recursive>
 8003bf2:	bf00      	nop
 8003bf4:	2000030c 	.word	0x2000030c

08003bf8 <__sfputc_r>:
 8003bf8:	6893      	ldr	r3, [r2, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	b410      	push	{r4}
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	da08      	bge.n	8003c16 <__sfputc_r+0x1e>
 8003c04:	6994      	ldr	r4, [r2, #24]
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	db01      	blt.n	8003c0e <__sfputc_r+0x16>
 8003c0a:	290a      	cmp	r1, #10
 8003c0c:	d103      	bne.n	8003c16 <__sfputc_r+0x1e>
 8003c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c12:	f000 bb6d 	b.w	80042f0 <__swbuf_r>
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	1c58      	adds	r0, r3, #1
 8003c1a:	6010      	str	r0, [r2, #0]
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <__sfputs_r>:
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c28:	4606      	mov	r6, r0
 8003c2a:	460f      	mov	r7, r1
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	18d5      	adds	r5, r2, r3
 8003c30:	42ac      	cmp	r4, r5
 8003c32:	d101      	bne.n	8003c38 <__sfputs_r+0x12>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e007      	b.n	8003c48 <__sfputs_r+0x22>
 8003c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7ff ffda 	bl	8003bf8 <__sfputc_r>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d1f3      	bne.n	8003c30 <__sfputs_r+0xa>
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c4c <_vfiprintf_r>:
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	460d      	mov	r5, r1
 8003c52:	b09d      	sub	sp, #116	@ 0x74
 8003c54:	4614      	mov	r4, r2
 8003c56:	4698      	mov	r8, r3
 8003c58:	4606      	mov	r6, r0
 8003c5a:	b118      	cbz	r0, 8003c64 <_vfiprintf_r+0x18>
 8003c5c:	6a03      	ldr	r3, [r0, #32]
 8003c5e:	b90b      	cbnz	r3, 8003c64 <_vfiprintf_r+0x18>
 8003c60:	f7ff fdc2 	bl	80037e8 <__sinit>
 8003c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c66:	07d9      	lsls	r1, r3, #31
 8003c68:	d405      	bmi.n	8003c76 <_vfiprintf_r+0x2a>
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	059a      	lsls	r2, r3, #22
 8003c6e:	d402      	bmi.n	8003c76 <_vfiprintf_r+0x2a>
 8003c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c72:	f7ff febe 	bl	80039f2 <__retarget_lock_acquire_recursive>
 8003c76:	89ab      	ldrh	r3, [r5, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	d501      	bpl.n	8003c80 <_vfiprintf_r+0x34>
 8003c7c:	692b      	ldr	r3, [r5, #16]
 8003c7e:	b99b      	cbnz	r3, 8003ca8 <_vfiprintf_r+0x5c>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 fb72 	bl	800436c <__swsetup_r>
 8003c88:	b170      	cbz	r0, 8003ca8 <_vfiprintf_r+0x5c>
 8003c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c8c:	07dc      	lsls	r4, r3, #31
 8003c8e:	d504      	bpl.n	8003c9a <_vfiprintf_r+0x4e>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	b01d      	add	sp, #116	@ 0x74
 8003c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	0598      	lsls	r0, r3, #22
 8003c9e:	d4f7      	bmi.n	8003c90 <_vfiprintf_r+0x44>
 8003ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ca2:	f7ff fea7 	bl	80039f4 <__retarget_lock_release_recursive>
 8003ca6:	e7f3      	b.n	8003c90 <_vfiprintf_r+0x44>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cac:	2320      	movs	r3, #32
 8003cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb6:	2330      	movs	r3, #48	@ 0x30
 8003cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e68 <_vfiprintf_r+0x21c>
 8003cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cc0:	f04f 0901 	mov.w	r9, #1
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	469a      	mov	sl, r3
 8003cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_vfiprintf_r+0x86>
 8003cce:	2a25      	cmp	r2, #37	@ 0x25
 8003cd0:	d1f9      	bne.n	8003cc6 <_vfiprintf_r+0x7a>
 8003cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003cd6:	d00b      	beq.n	8003cf0 <_vfiprintf_r+0xa4>
 8003cd8:	465b      	mov	r3, fp
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ffa1 	bl	8003c26 <__sfputs_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f000 80a7 	beq.w	8003e38 <_vfiprintf_r+0x1ec>
 8003cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cec:	445a      	add	r2, fp
 8003cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 809f 	beq.w	8003e38 <_vfiprintf_r+0x1ec>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d04:	f10a 0a01 	add.w	sl, sl, #1
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	9307      	str	r3, [sp, #28]
 8003d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d12:	4654      	mov	r4, sl
 8003d14:	2205      	movs	r2, #5
 8003d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d1a:	4853      	ldr	r0, [pc, #332]	@ (8003e68 <_vfiprintf_r+0x21c>)
 8003d1c:	f7fc fa70 	bl	8000200 <memchr>
 8003d20:	9a04      	ldr	r2, [sp, #16]
 8003d22:	b9d8      	cbnz	r0, 8003d5c <_vfiprintf_r+0x110>
 8003d24:	06d1      	lsls	r1, r2, #27
 8003d26:	bf44      	itt	mi
 8003d28:	2320      	movmi	r3, #32
 8003d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d2e:	0713      	lsls	r3, r2, #28
 8003d30:	bf44      	itt	mi
 8003d32:	232b      	movmi	r3, #43	@ 0x2b
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d38:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d3e:	d015      	beq.n	8003d6c <_vfiprintf_r+0x120>
 8003d40:	9a07      	ldr	r2, [sp, #28]
 8003d42:	4654      	mov	r4, sl
 8003d44:	2000      	movs	r0, #0
 8003d46:	f04f 0c0a 	mov.w	ip, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d50:	3b30      	subs	r3, #48	@ 0x30
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d94b      	bls.n	8003dee <_vfiprintf_r+0x1a2>
 8003d56:	b1b0      	cbz	r0, 8003d86 <_vfiprintf_r+0x13a>
 8003d58:	9207      	str	r2, [sp, #28]
 8003d5a:	e014      	b.n	8003d86 <_vfiprintf_r+0x13a>
 8003d5c:	eba0 0308 	sub.w	r3, r0, r8
 8003d60:	fa09 f303 	lsl.w	r3, r9, r3
 8003d64:	4313      	orrs	r3, r2
 8003d66:	9304      	str	r3, [sp, #16]
 8003d68:	46a2      	mov	sl, r4
 8003d6a:	e7d2      	b.n	8003d12 <_vfiprintf_r+0xc6>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	1d19      	adds	r1, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	9103      	str	r1, [sp, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfbb      	ittet	lt
 8003d78:	425b      	neglt	r3, r3
 8003d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d7e:	9307      	strge	r3, [sp, #28]
 8003d80:	9307      	strlt	r3, [sp, #28]
 8003d82:	bfb8      	it	lt
 8003d84:	9204      	strlt	r2, [sp, #16]
 8003d86:	7823      	ldrb	r3, [r4, #0]
 8003d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d8a:	d10a      	bne.n	8003da2 <_vfiprintf_r+0x156>
 8003d8c:	7863      	ldrb	r3, [r4, #1]
 8003d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d90:	d132      	bne.n	8003df8 <_vfiprintf_r+0x1ac>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	9203      	str	r2, [sp, #12]
 8003d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d9e:	3402      	adds	r4, #2
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e78 <_vfiprintf_r+0x22c>
 8003da6:	7821      	ldrb	r1, [r4, #0]
 8003da8:	2203      	movs	r2, #3
 8003daa:	4650      	mov	r0, sl
 8003dac:	f7fc fa28 	bl	8000200 <memchr>
 8003db0:	b138      	cbz	r0, 8003dc2 <_vfiprintf_r+0x176>
 8003db2:	9b04      	ldr	r3, [sp, #16]
 8003db4:	eba0 000a 	sub.w	r0, r0, sl
 8003db8:	2240      	movs	r2, #64	@ 0x40
 8003dba:	4082      	lsls	r2, r0
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc6:	4829      	ldr	r0, [pc, #164]	@ (8003e6c <_vfiprintf_r+0x220>)
 8003dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dcc:	2206      	movs	r2, #6
 8003dce:	f7fc fa17 	bl	8000200 <memchr>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d03f      	beq.n	8003e56 <_vfiprintf_r+0x20a>
 8003dd6:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <_vfiprintf_r+0x224>)
 8003dd8:	bb1b      	cbnz	r3, 8003e22 <_vfiprintf_r+0x1d6>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	3307      	adds	r3, #7
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	3308      	adds	r3, #8
 8003de4:	9303      	str	r3, [sp, #12]
 8003de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003de8:	443b      	add	r3, r7
 8003dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dec:	e76a      	b.n	8003cc4 <_vfiprintf_r+0x78>
 8003dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df2:	460c      	mov	r4, r1
 8003df4:	2001      	movs	r0, #1
 8003df6:	e7a8      	b.n	8003d4a <_vfiprintf_r+0xfe>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	3401      	adds	r4, #1
 8003dfc:	9305      	str	r3, [sp, #20]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f04f 0c0a 	mov.w	ip, #10
 8003e04:	4620      	mov	r0, r4
 8003e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e0a:	3a30      	subs	r2, #48	@ 0x30
 8003e0c:	2a09      	cmp	r2, #9
 8003e0e:	d903      	bls.n	8003e18 <_vfiprintf_r+0x1cc>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0c6      	beq.n	8003da2 <_vfiprintf_r+0x156>
 8003e14:	9105      	str	r1, [sp, #20]
 8003e16:	e7c4      	b.n	8003da2 <_vfiprintf_r+0x156>
 8003e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e7f0      	b.n	8003e04 <_vfiprintf_r+0x1b8>
 8003e22:	ab03      	add	r3, sp, #12
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <_vfiprintf_r+0x228>)
 8003e2a:	a904      	add	r1, sp, #16
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f3af 8000 	nop.w
 8003e32:	4607      	mov	r7, r0
 8003e34:	1c78      	adds	r0, r7, #1
 8003e36:	d1d6      	bne.n	8003de6 <_vfiprintf_r+0x19a>
 8003e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e3a:	07d9      	lsls	r1, r3, #31
 8003e3c:	d405      	bmi.n	8003e4a <_vfiprintf_r+0x1fe>
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	059a      	lsls	r2, r3, #22
 8003e42:	d402      	bmi.n	8003e4a <_vfiprintf_r+0x1fe>
 8003e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e46:	f7ff fdd5 	bl	80039f4 <__retarget_lock_release_recursive>
 8003e4a:	89ab      	ldrh	r3, [r5, #12]
 8003e4c:	065b      	lsls	r3, r3, #25
 8003e4e:	f53f af1f 	bmi.w	8003c90 <_vfiprintf_r+0x44>
 8003e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e54:	e71e      	b.n	8003c94 <_vfiprintf_r+0x48>
 8003e56:	ab03      	add	r3, sp, #12
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <_vfiprintf_r+0x228>)
 8003e5e:	a904      	add	r1, sp, #16
 8003e60:	4630      	mov	r0, r6
 8003e62:	f000 f879 	bl	8003f58 <_printf_i>
 8003e66:	e7e4      	b.n	8003e32 <_vfiprintf_r+0x1e6>
 8003e68:	080045c0 	.word	0x080045c0
 8003e6c:	080045ca 	.word	0x080045ca
 8003e70:	00000000 	.word	0x00000000
 8003e74:	08003c27 	.word	0x08003c27
 8003e78:	080045c6 	.word	0x080045c6

08003e7c <_printf_common>:
 8003e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e80:	4616      	mov	r6, r2
 8003e82:	4698      	mov	r8, r3
 8003e84:	688a      	ldr	r2, [r1, #8]
 8003e86:	690b      	ldr	r3, [r1, #16]
 8003e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bfb8      	it	lt
 8003e90:	4613      	movlt	r3, r2
 8003e92:	6033      	str	r3, [r6, #0]
 8003e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e98:	4607      	mov	r7, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	b10a      	cbz	r2, 8003ea2 <_printf_common+0x26>
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	6033      	str	r3, [r6, #0]
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	0699      	lsls	r1, r3, #26
 8003ea6:	bf42      	ittt	mi
 8003ea8:	6833      	ldrmi	r3, [r6, #0]
 8003eaa:	3302      	addmi	r3, #2
 8003eac:	6033      	strmi	r3, [r6, #0]
 8003eae:	6825      	ldr	r5, [r4, #0]
 8003eb0:	f015 0506 	ands.w	r5, r5, #6
 8003eb4:	d106      	bne.n	8003ec4 <_printf_common+0x48>
 8003eb6:	f104 0a19 	add.w	sl, r4, #25
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	6832      	ldr	r2, [r6, #0]
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	dc26      	bgt.n	8003f12 <_printf_common+0x96>
 8003ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	3b00      	subs	r3, #0
 8003ecc:	bf18      	it	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	0692      	lsls	r2, r2, #26
 8003ed2:	d42b      	bmi.n	8003f2c <_printf_common+0xb0>
 8003ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ed8:	4641      	mov	r1, r8
 8003eda:	4638      	mov	r0, r7
 8003edc:	47c8      	blx	r9
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d01e      	beq.n	8003f20 <_printf_common+0xa4>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	6922      	ldr	r2, [r4, #16]
 8003ee6:	f003 0306 	and.w	r3, r3, #6
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	bf02      	ittt	eq
 8003eee:	68e5      	ldreq	r5, [r4, #12]
 8003ef0:	6833      	ldreq	r3, [r6, #0]
 8003ef2:	1aed      	subeq	r5, r5, r3
 8003ef4:	68a3      	ldr	r3, [r4, #8]
 8003ef6:	bf0c      	ite	eq
 8003ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003efc:	2500      	movne	r5, #0
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bfc4      	itt	gt
 8003f02:	1a9b      	subgt	r3, r3, r2
 8003f04:	18ed      	addgt	r5, r5, r3
 8003f06:	2600      	movs	r6, #0
 8003f08:	341a      	adds	r4, #26
 8003f0a:	42b5      	cmp	r5, r6
 8003f0c:	d11a      	bne.n	8003f44 <_printf_common+0xc8>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e008      	b.n	8003f24 <_printf_common+0xa8>
 8003f12:	2301      	movs	r3, #1
 8003f14:	4652      	mov	r2, sl
 8003f16:	4641      	mov	r1, r8
 8003f18:	4638      	mov	r0, r7
 8003f1a:	47c8      	blx	r9
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d103      	bne.n	8003f28 <_printf_common+0xac>
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f28:	3501      	adds	r5, #1
 8003f2a:	e7c6      	b.n	8003eba <_printf_common+0x3e>
 8003f2c:	18e1      	adds	r1, r4, r3
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	2030      	movs	r0, #48	@ 0x30
 8003f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f36:	4422      	add	r2, r4
 8003f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f40:	3302      	adds	r3, #2
 8003f42:	e7c7      	b.n	8003ed4 <_printf_common+0x58>
 8003f44:	2301      	movs	r3, #1
 8003f46:	4622      	mov	r2, r4
 8003f48:	4641      	mov	r1, r8
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c8      	blx	r9
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d0e6      	beq.n	8003f20 <_printf_common+0xa4>
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7d9      	b.n	8003f0a <_printf_common+0x8e>
	...

08003f58 <_printf_i>:
 8003f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	7e0f      	ldrb	r7, [r1, #24]
 8003f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f60:	2f78      	cmp	r7, #120	@ 0x78
 8003f62:	4691      	mov	r9, r2
 8003f64:	4680      	mov	r8, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	469a      	mov	sl, r3
 8003f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f6e:	d807      	bhi.n	8003f80 <_printf_i+0x28>
 8003f70:	2f62      	cmp	r7, #98	@ 0x62
 8003f72:	d80a      	bhi.n	8003f8a <_printf_i+0x32>
 8003f74:	2f00      	cmp	r7, #0
 8003f76:	f000 80d2 	beq.w	800411e <_printf_i+0x1c6>
 8003f7a:	2f58      	cmp	r7, #88	@ 0x58
 8003f7c:	f000 80b9 	beq.w	80040f2 <_printf_i+0x19a>
 8003f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f88:	e03a      	b.n	8004000 <_printf_i+0xa8>
 8003f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f8e:	2b15      	cmp	r3, #21
 8003f90:	d8f6      	bhi.n	8003f80 <_printf_i+0x28>
 8003f92:	a101      	add	r1, pc, #4	@ (adr r1, 8003f98 <_printf_i+0x40>)
 8003f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f98:	08003ff1 	.word	0x08003ff1
 8003f9c:	08004005 	.word	0x08004005
 8003fa0:	08003f81 	.word	0x08003f81
 8003fa4:	08003f81 	.word	0x08003f81
 8003fa8:	08003f81 	.word	0x08003f81
 8003fac:	08003f81 	.word	0x08003f81
 8003fb0:	08004005 	.word	0x08004005
 8003fb4:	08003f81 	.word	0x08003f81
 8003fb8:	08003f81 	.word	0x08003f81
 8003fbc:	08003f81 	.word	0x08003f81
 8003fc0:	08003f81 	.word	0x08003f81
 8003fc4:	08004105 	.word	0x08004105
 8003fc8:	0800402f 	.word	0x0800402f
 8003fcc:	080040bf 	.word	0x080040bf
 8003fd0:	08003f81 	.word	0x08003f81
 8003fd4:	08003f81 	.word	0x08003f81
 8003fd8:	08004127 	.word	0x08004127
 8003fdc:	08003f81 	.word	0x08003f81
 8003fe0:	0800402f 	.word	0x0800402f
 8003fe4:	08003f81 	.word	0x08003f81
 8003fe8:	08003f81 	.word	0x08003f81
 8003fec:	080040c7 	.word	0x080040c7
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6032      	str	r2, [r6, #0]
 8003ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004000:	2301      	movs	r3, #1
 8004002:	e09d      	b.n	8004140 <_printf_i+0x1e8>
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	1d19      	adds	r1, r3, #4
 800400a:	6031      	str	r1, [r6, #0]
 800400c:	0606      	lsls	r6, r0, #24
 800400e:	d501      	bpl.n	8004014 <_printf_i+0xbc>
 8004010:	681d      	ldr	r5, [r3, #0]
 8004012:	e003      	b.n	800401c <_printf_i+0xc4>
 8004014:	0645      	lsls	r5, r0, #25
 8004016:	d5fb      	bpl.n	8004010 <_printf_i+0xb8>
 8004018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800401c:	2d00      	cmp	r5, #0
 800401e:	da03      	bge.n	8004028 <_printf_i+0xd0>
 8004020:	232d      	movs	r3, #45	@ 0x2d
 8004022:	426d      	negs	r5, r5
 8004024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004028:	4859      	ldr	r0, [pc, #356]	@ (8004190 <_printf_i+0x238>)
 800402a:	230a      	movs	r3, #10
 800402c:	e011      	b.n	8004052 <_printf_i+0xfa>
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	6833      	ldr	r3, [r6, #0]
 8004032:	0608      	lsls	r0, r1, #24
 8004034:	f853 5b04 	ldr.w	r5, [r3], #4
 8004038:	d402      	bmi.n	8004040 <_printf_i+0xe8>
 800403a:	0649      	lsls	r1, r1, #25
 800403c:	bf48      	it	mi
 800403e:	b2ad      	uxthmi	r5, r5
 8004040:	2f6f      	cmp	r7, #111	@ 0x6f
 8004042:	4853      	ldr	r0, [pc, #332]	@ (8004190 <_printf_i+0x238>)
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	bf14      	ite	ne
 8004048:	230a      	movne	r3, #10
 800404a:	2308      	moveq	r3, #8
 800404c:	2100      	movs	r1, #0
 800404e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004052:	6866      	ldr	r6, [r4, #4]
 8004054:	60a6      	str	r6, [r4, #8]
 8004056:	2e00      	cmp	r6, #0
 8004058:	bfa2      	ittt	ge
 800405a:	6821      	ldrge	r1, [r4, #0]
 800405c:	f021 0104 	bicge.w	r1, r1, #4
 8004060:	6021      	strge	r1, [r4, #0]
 8004062:	b90d      	cbnz	r5, 8004068 <_printf_i+0x110>
 8004064:	2e00      	cmp	r6, #0
 8004066:	d04b      	beq.n	8004100 <_printf_i+0x1a8>
 8004068:	4616      	mov	r6, r2
 800406a:	fbb5 f1f3 	udiv	r1, r5, r3
 800406e:	fb03 5711 	mls	r7, r3, r1, r5
 8004072:	5dc7      	ldrb	r7, [r0, r7]
 8004074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004078:	462f      	mov	r7, r5
 800407a:	42bb      	cmp	r3, r7
 800407c:	460d      	mov	r5, r1
 800407e:	d9f4      	bls.n	800406a <_printf_i+0x112>
 8004080:	2b08      	cmp	r3, #8
 8004082:	d10b      	bne.n	800409c <_printf_i+0x144>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	07df      	lsls	r7, r3, #31
 8004088:	d508      	bpl.n	800409c <_printf_i+0x144>
 800408a:	6923      	ldr	r3, [r4, #16]
 800408c:	6861      	ldr	r1, [r4, #4]
 800408e:	4299      	cmp	r1, r3
 8004090:	bfde      	ittt	le
 8004092:	2330      	movle	r3, #48	@ 0x30
 8004094:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800409c:	1b92      	subs	r2, r2, r6
 800409e:	6122      	str	r2, [r4, #16]
 80040a0:	f8cd a000 	str.w	sl, [sp]
 80040a4:	464b      	mov	r3, r9
 80040a6:	aa03      	add	r2, sp, #12
 80040a8:	4621      	mov	r1, r4
 80040aa:	4640      	mov	r0, r8
 80040ac:	f7ff fee6 	bl	8003e7c <_printf_common>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d14a      	bne.n	800414a <_printf_i+0x1f2>
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	b004      	add	sp, #16
 80040ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f043 0320 	orr.w	r3, r3, #32
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	4833      	ldr	r0, [pc, #204]	@ (8004194 <_printf_i+0x23c>)
 80040c8:	2778      	movs	r7, #120	@ 0x78
 80040ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	6831      	ldr	r1, [r6, #0]
 80040d2:	061f      	lsls	r7, r3, #24
 80040d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80040d8:	d402      	bmi.n	80040e0 <_printf_i+0x188>
 80040da:	065f      	lsls	r7, r3, #25
 80040dc:	bf48      	it	mi
 80040de:	b2ad      	uxthmi	r5, r5
 80040e0:	6031      	str	r1, [r6, #0]
 80040e2:	07d9      	lsls	r1, r3, #31
 80040e4:	bf44      	itt	mi
 80040e6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ea:	6023      	strmi	r3, [r4, #0]
 80040ec:	b11d      	cbz	r5, 80040f6 <_printf_i+0x19e>
 80040ee:	2310      	movs	r3, #16
 80040f0:	e7ac      	b.n	800404c <_printf_i+0xf4>
 80040f2:	4827      	ldr	r0, [pc, #156]	@ (8004190 <_printf_i+0x238>)
 80040f4:	e7e9      	b.n	80040ca <_printf_i+0x172>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	f023 0320 	bic.w	r3, r3, #32
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	e7f6      	b.n	80040ee <_printf_i+0x196>
 8004100:	4616      	mov	r6, r2
 8004102:	e7bd      	b.n	8004080 <_printf_i+0x128>
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	6825      	ldr	r5, [r4, #0]
 8004108:	6961      	ldr	r1, [r4, #20]
 800410a:	1d18      	adds	r0, r3, #4
 800410c:	6030      	str	r0, [r6, #0]
 800410e:	062e      	lsls	r6, r5, #24
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	d501      	bpl.n	8004118 <_printf_i+0x1c0>
 8004114:	6019      	str	r1, [r3, #0]
 8004116:	e002      	b.n	800411e <_printf_i+0x1c6>
 8004118:	0668      	lsls	r0, r5, #25
 800411a:	d5fb      	bpl.n	8004114 <_printf_i+0x1bc>
 800411c:	8019      	strh	r1, [r3, #0]
 800411e:	2300      	movs	r3, #0
 8004120:	6123      	str	r3, [r4, #16]
 8004122:	4616      	mov	r6, r2
 8004124:	e7bc      	b.n	80040a0 <_printf_i+0x148>
 8004126:	6833      	ldr	r3, [r6, #0]
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	681e      	ldr	r6, [r3, #0]
 800412e:	6862      	ldr	r2, [r4, #4]
 8004130:	2100      	movs	r1, #0
 8004132:	4630      	mov	r0, r6
 8004134:	f7fc f864 	bl	8000200 <memchr>
 8004138:	b108      	cbz	r0, 800413e <_printf_i+0x1e6>
 800413a:	1b80      	subs	r0, r0, r6
 800413c:	6060      	str	r0, [r4, #4]
 800413e:	6863      	ldr	r3, [r4, #4]
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	2300      	movs	r3, #0
 8004144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004148:	e7aa      	b.n	80040a0 <_printf_i+0x148>
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	4632      	mov	r2, r6
 800414e:	4649      	mov	r1, r9
 8004150:	4640      	mov	r0, r8
 8004152:	47d0      	blx	sl
 8004154:	3001      	adds	r0, #1
 8004156:	d0ad      	beq.n	80040b4 <_printf_i+0x15c>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	079b      	lsls	r3, r3, #30
 800415c:	d413      	bmi.n	8004186 <_printf_i+0x22e>
 800415e:	68e0      	ldr	r0, [r4, #12]
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	4298      	cmp	r0, r3
 8004164:	bfb8      	it	lt
 8004166:	4618      	movlt	r0, r3
 8004168:	e7a6      	b.n	80040b8 <_printf_i+0x160>
 800416a:	2301      	movs	r3, #1
 800416c:	4632      	mov	r2, r6
 800416e:	4649      	mov	r1, r9
 8004170:	4640      	mov	r0, r8
 8004172:	47d0      	blx	sl
 8004174:	3001      	adds	r0, #1
 8004176:	d09d      	beq.n	80040b4 <_printf_i+0x15c>
 8004178:	3501      	adds	r5, #1
 800417a:	68e3      	ldr	r3, [r4, #12]
 800417c:	9903      	ldr	r1, [sp, #12]
 800417e:	1a5b      	subs	r3, r3, r1
 8004180:	42ab      	cmp	r3, r5
 8004182:	dcf2      	bgt.n	800416a <_printf_i+0x212>
 8004184:	e7eb      	b.n	800415e <_printf_i+0x206>
 8004186:	2500      	movs	r5, #0
 8004188:	f104 0619 	add.w	r6, r4, #25
 800418c:	e7f5      	b.n	800417a <_printf_i+0x222>
 800418e:	bf00      	nop
 8004190:	080045d1 	.word	0x080045d1
 8004194:	080045e2 	.word	0x080045e2

08004198 <__sflush_r>:
 8004198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	0716      	lsls	r6, r2, #28
 80041a2:	4605      	mov	r5, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	d454      	bmi.n	8004252 <__sflush_r+0xba>
 80041a8:	684b      	ldr	r3, [r1, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dc02      	bgt.n	80041b4 <__sflush_r+0x1c>
 80041ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dd48      	ble.n	8004246 <__sflush_r+0xae>
 80041b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	d045      	beq.n	8004246 <__sflush_r+0xae>
 80041ba:	2300      	movs	r3, #0
 80041bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80041c0:	682f      	ldr	r7, [r5, #0]
 80041c2:	6a21      	ldr	r1, [r4, #32]
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	d030      	beq.n	800422a <__sflush_r+0x92>
 80041c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	0759      	lsls	r1, r3, #29
 80041ce:	d505      	bpl.n	80041dc <__sflush_r+0x44>
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80041d6:	b10b      	cbz	r3, 80041dc <__sflush_r+0x44>
 80041d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041e0:	6a21      	ldr	r1, [r4, #32]
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b0      	blx	r6
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	d106      	bne.n	80041fa <__sflush_r+0x62>
 80041ec:	6829      	ldr	r1, [r5, #0]
 80041ee:	291d      	cmp	r1, #29
 80041f0:	d82b      	bhi.n	800424a <__sflush_r+0xb2>
 80041f2:	4a2a      	ldr	r2, [pc, #168]	@ (800429c <__sflush_r+0x104>)
 80041f4:	410a      	asrs	r2, r1
 80041f6:	07d6      	lsls	r6, r2, #31
 80041f8:	d427      	bmi.n	800424a <__sflush_r+0xb2>
 80041fa:	2200      	movs	r2, #0
 80041fc:	6062      	str	r2, [r4, #4]
 80041fe:	04d9      	lsls	r1, r3, #19
 8004200:	6922      	ldr	r2, [r4, #16]
 8004202:	6022      	str	r2, [r4, #0]
 8004204:	d504      	bpl.n	8004210 <__sflush_r+0x78>
 8004206:	1c42      	adds	r2, r0, #1
 8004208:	d101      	bne.n	800420e <__sflush_r+0x76>
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	b903      	cbnz	r3, 8004210 <__sflush_r+0x78>
 800420e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004212:	602f      	str	r7, [r5, #0]
 8004214:	b1b9      	cbz	r1, 8004246 <__sflush_r+0xae>
 8004216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800421a:	4299      	cmp	r1, r3
 800421c:	d002      	beq.n	8004224 <__sflush_r+0x8c>
 800421e:	4628      	mov	r0, r5
 8004220:	f7ff fbf2 	bl	8003a08 <_free_r>
 8004224:	2300      	movs	r3, #0
 8004226:	6363      	str	r3, [r4, #52]	@ 0x34
 8004228:	e00d      	b.n	8004246 <__sflush_r+0xae>
 800422a:	2301      	movs	r3, #1
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	4602      	mov	r2, r0
 8004232:	1c50      	adds	r0, r2, #1
 8004234:	d1c9      	bne.n	80041ca <__sflush_r+0x32>
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0c6      	beq.n	80041ca <__sflush_r+0x32>
 800423c:	2b1d      	cmp	r3, #29
 800423e:	d001      	beq.n	8004244 <__sflush_r+0xac>
 8004240:	2b16      	cmp	r3, #22
 8004242:	d11e      	bne.n	8004282 <__sflush_r+0xea>
 8004244:	602f      	str	r7, [r5, #0]
 8004246:	2000      	movs	r0, #0
 8004248:	e022      	b.n	8004290 <__sflush_r+0xf8>
 800424a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800424e:	b21b      	sxth	r3, r3
 8004250:	e01b      	b.n	800428a <__sflush_r+0xf2>
 8004252:	690f      	ldr	r7, [r1, #16]
 8004254:	2f00      	cmp	r7, #0
 8004256:	d0f6      	beq.n	8004246 <__sflush_r+0xae>
 8004258:	0793      	lsls	r3, r2, #30
 800425a:	680e      	ldr	r6, [r1, #0]
 800425c:	bf08      	it	eq
 800425e:	694b      	ldreq	r3, [r1, #20]
 8004260:	600f      	str	r7, [r1, #0]
 8004262:	bf18      	it	ne
 8004264:	2300      	movne	r3, #0
 8004266:	eba6 0807 	sub.w	r8, r6, r7
 800426a:	608b      	str	r3, [r1, #8]
 800426c:	f1b8 0f00 	cmp.w	r8, #0
 8004270:	dde9      	ble.n	8004246 <__sflush_r+0xae>
 8004272:	6a21      	ldr	r1, [r4, #32]
 8004274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004276:	4643      	mov	r3, r8
 8004278:	463a      	mov	r2, r7
 800427a:	4628      	mov	r0, r5
 800427c:	47b0      	blx	r6
 800427e:	2800      	cmp	r0, #0
 8004280:	dc08      	bgt.n	8004294 <__sflush_r+0xfc>
 8004282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004294:	4407      	add	r7, r0
 8004296:	eba8 0800 	sub.w	r8, r8, r0
 800429a:	e7e7      	b.n	800426c <__sflush_r+0xd4>
 800429c:	dfbffffe 	.word	0xdfbffffe

080042a0 <_fflush_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	690b      	ldr	r3, [r1, #16]
 80042a4:	4605      	mov	r5, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	b913      	cbnz	r3, 80042b0 <_fflush_r+0x10>
 80042aa:	2500      	movs	r5, #0
 80042ac:	4628      	mov	r0, r5
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	b118      	cbz	r0, 80042ba <_fflush_r+0x1a>
 80042b2:	6a03      	ldr	r3, [r0, #32]
 80042b4:	b90b      	cbnz	r3, 80042ba <_fflush_r+0x1a>
 80042b6:	f7ff fa97 	bl	80037e8 <__sinit>
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f3      	beq.n	80042aa <_fflush_r+0xa>
 80042c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042c4:	07d0      	lsls	r0, r2, #31
 80042c6:	d404      	bmi.n	80042d2 <_fflush_r+0x32>
 80042c8:	0599      	lsls	r1, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_fflush_r+0x32>
 80042cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ce:	f7ff fb90 	bl	80039f2 <__retarget_lock_acquire_recursive>
 80042d2:	4628      	mov	r0, r5
 80042d4:	4621      	mov	r1, r4
 80042d6:	f7ff ff5f 	bl	8004198 <__sflush_r>
 80042da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042dc:	07da      	lsls	r2, r3, #31
 80042de:	4605      	mov	r5, r0
 80042e0:	d4e4      	bmi.n	80042ac <_fflush_r+0xc>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	059b      	lsls	r3, r3, #22
 80042e6:	d4e1      	bmi.n	80042ac <_fflush_r+0xc>
 80042e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ea:	f7ff fb83 	bl	80039f4 <__retarget_lock_release_recursive>
 80042ee:	e7dd      	b.n	80042ac <_fflush_r+0xc>

080042f0 <__swbuf_r>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	460e      	mov	r6, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	4605      	mov	r5, r0
 80042f8:	b118      	cbz	r0, 8004302 <__swbuf_r+0x12>
 80042fa:	6a03      	ldr	r3, [r0, #32]
 80042fc:	b90b      	cbnz	r3, 8004302 <__swbuf_r+0x12>
 80042fe:	f7ff fa73 	bl	80037e8 <__sinit>
 8004302:	69a3      	ldr	r3, [r4, #24]
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	071a      	lsls	r2, r3, #28
 800430a:	d501      	bpl.n	8004310 <__swbuf_r+0x20>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	b943      	cbnz	r3, 8004322 <__swbuf_r+0x32>
 8004310:	4621      	mov	r1, r4
 8004312:	4628      	mov	r0, r5
 8004314:	f000 f82a 	bl	800436c <__swsetup_r>
 8004318:	b118      	cbz	r0, 8004322 <__swbuf_r+0x32>
 800431a:	f04f 37ff 	mov.w	r7, #4294967295
 800431e:	4638      	mov	r0, r7
 8004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	6922      	ldr	r2, [r4, #16]
 8004326:	1a98      	subs	r0, r3, r2
 8004328:	6963      	ldr	r3, [r4, #20]
 800432a:	b2f6      	uxtb	r6, r6
 800432c:	4283      	cmp	r3, r0
 800432e:	4637      	mov	r7, r6
 8004330:	dc05      	bgt.n	800433e <__swbuf_r+0x4e>
 8004332:	4621      	mov	r1, r4
 8004334:	4628      	mov	r0, r5
 8004336:	f7ff ffb3 	bl	80042a0 <_fflush_r>
 800433a:	2800      	cmp	r0, #0
 800433c:	d1ed      	bne.n	800431a <__swbuf_r+0x2a>
 800433e:	68a3      	ldr	r3, [r4, #8]
 8004340:	3b01      	subs	r3, #1
 8004342:	60a3      	str	r3, [r4, #8]
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	6022      	str	r2, [r4, #0]
 800434a:	701e      	strb	r6, [r3, #0]
 800434c:	6962      	ldr	r2, [r4, #20]
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	429a      	cmp	r2, r3
 8004352:	d004      	beq.n	800435e <__swbuf_r+0x6e>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	07db      	lsls	r3, r3, #31
 8004358:	d5e1      	bpl.n	800431e <__swbuf_r+0x2e>
 800435a:	2e0a      	cmp	r6, #10
 800435c:	d1df      	bne.n	800431e <__swbuf_r+0x2e>
 800435e:	4621      	mov	r1, r4
 8004360:	4628      	mov	r0, r5
 8004362:	f7ff ff9d 	bl	80042a0 <_fflush_r>
 8004366:	2800      	cmp	r0, #0
 8004368:	d0d9      	beq.n	800431e <__swbuf_r+0x2e>
 800436a:	e7d6      	b.n	800431a <__swbuf_r+0x2a>

0800436c <__swsetup_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4b29      	ldr	r3, [pc, #164]	@ (8004414 <__swsetup_r+0xa8>)
 8004370:	4605      	mov	r5, r0
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	460c      	mov	r4, r1
 8004376:	b118      	cbz	r0, 8004380 <__swsetup_r+0x14>
 8004378:	6a03      	ldr	r3, [r0, #32]
 800437a:	b90b      	cbnz	r3, 8004380 <__swsetup_r+0x14>
 800437c:	f7ff fa34 	bl	80037e8 <__sinit>
 8004380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004384:	0719      	lsls	r1, r3, #28
 8004386:	d422      	bmi.n	80043ce <__swsetup_r+0x62>
 8004388:	06da      	lsls	r2, r3, #27
 800438a:	d407      	bmi.n	800439c <__swsetup_r+0x30>
 800438c:	2209      	movs	r2, #9
 800438e:	602a      	str	r2, [r5, #0]
 8004390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	f04f 30ff 	mov.w	r0, #4294967295
 800439a:	e033      	b.n	8004404 <__swsetup_r+0x98>
 800439c:	0758      	lsls	r0, r3, #29
 800439e:	d512      	bpl.n	80043c6 <__swsetup_r+0x5a>
 80043a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043a2:	b141      	cbz	r1, 80043b6 <__swsetup_r+0x4a>
 80043a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043a8:	4299      	cmp	r1, r3
 80043aa:	d002      	beq.n	80043b2 <__swsetup_r+0x46>
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff fb2b 	bl	8003a08 <_free_r>
 80043b2:	2300      	movs	r3, #0
 80043b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	2300      	movs	r3, #0
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f043 0308 	orr.w	r3, r3, #8
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	6923      	ldr	r3, [r4, #16]
 80043d0:	b94b      	cbnz	r3, 80043e6 <__swsetup_r+0x7a>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80043d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043dc:	d003      	beq.n	80043e6 <__swsetup_r+0x7a>
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 f84f 	bl	8004484 <__smakebuf_r>
 80043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ea:	f013 0201 	ands.w	r2, r3, #1
 80043ee:	d00a      	beq.n	8004406 <__swsetup_r+0x9a>
 80043f0:	2200      	movs	r2, #0
 80043f2:	60a2      	str	r2, [r4, #8]
 80043f4:	6962      	ldr	r2, [r4, #20]
 80043f6:	4252      	negs	r2, r2
 80043f8:	61a2      	str	r2, [r4, #24]
 80043fa:	6922      	ldr	r2, [r4, #16]
 80043fc:	b942      	cbnz	r2, 8004410 <__swsetup_r+0xa4>
 80043fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004402:	d1c5      	bne.n	8004390 <__swsetup_r+0x24>
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	0799      	lsls	r1, r3, #30
 8004408:	bf58      	it	pl
 800440a:	6962      	ldrpl	r2, [r4, #20]
 800440c:	60a2      	str	r2, [r4, #8]
 800440e:	e7f4      	b.n	80043fa <__swsetup_r+0x8e>
 8004410:	2000      	movs	r0, #0
 8004412:	e7f7      	b.n	8004404 <__swsetup_r+0x98>
 8004414:	20000038 	.word	0x20000038

08004418 <_sbrk_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d06      	ldr	r5, [pc, #24]	@ (8004434 <_sbrk_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc fe2e 	bl	8001084 <_sbrk>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_sbrk_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_sbrk_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	20000308 	.word	0x20000308

08004438 <__swhatbuf_r>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	460c      	mov	r4, r1
 800443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004440:	2900      	cmp	r1, #0
 8004442:	b096      	sub	sp, #88	@ 0x58
 8004444:	4615      	mov	r5, r2
 8004446:	461e      	mov	r6, r3
 8004448:	da0d      	bge.n	8004466 <__swhatbuf_r+0x2e>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	bf14      	ite	ne
 8004456:	2340      	movne	r3, #64	@ 0x40
 8004458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800445c:	2000      	movs	r0, #0
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	b016      	add	sp, #88	@ 0x58
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	466a      	mov	r2, sp
 8004468:	f000 f848 	bl	80044fc <_fstat_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	dbec      	blt.n	800444a <__swhatbuf_r+0x12>
 8004470:	9901      	ldr	r1, [sp, #4]
 8004472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800447a:	4259      	negs	r1, r3
 800447c:	4159      	adcs	r1, r3
 800447e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004482:	e7eb      	b.n	800445c <__swhatbuf_r+0x24>

08004484 <__smakebuf_r>:
 8004484:	898b      	ldrh	r3, [r1, #12]
 8004486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004488:	079d      	lsls	r5, r3, #30
 800448a:	4606      	mov	r6, r0
 800448c:	460c      	mov	r4, r1
 800448e:	d507      	bpl.n	80044a0 <__smakebuf_r+0x1c>
 8004490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	6123      	str	r3, [r4, #16]
 8004498:	2301      	movs	r3, #1
 800449a:	6163      	str	r3, [r4, #20]
 800449c:	b003      	add	sp, #12
 800449e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a0:	ab01      	add	r3, sp, #4
 80044a2:	466a      	mov	r2, sp
 80044a4:	f7ff ffc8 	bl	8004438 <__swhatbuf_r>
 80044a8:	9f00      	ldr	r7, [sp, #0]
 80044aa:	4605      	mov	r5, r0
 80044ac:	4639      	mov	r1, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff fb16 	bl	8003ae0 <_malloc_r>
 80044b4:	b948      	cbnz	r0, 80044ca <__smakebuf_r+0x46>
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	059a      	lsls	r2, r3, #22
 80044bc:	d4ee      	bmi.n	800449c <__smakebuf_r+0x18>
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	f043 0302 	orr.w	r3, r3, #2
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	e7e2      	b.n	8004490 <__smakebuf_r+0xc>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	6020      	str	r0, [r4, #0]
 80044ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	9b01      	ldr	r3, [sp, #4]
 80044d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044da:	b15b      	cbz	r3, 80044f4 <__smakebuf_r+0x70>
 80044dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 f81d 	bl	8004520 <_isatty_r>
 80044e6:	b128      	cbz	r0, 80044f4 <__smakebuf_r+0x70>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	431d      	orrs	r5, r3
 80044f8:	81a5      	strh	r5, [r4, #12]
 80044fa:	e7cf      	b.n	800449c <__smakebuf_r+0x18>

080044fc <_fstat_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d07      	ldr	r5, [pc, #28]	@ (800451c <_fstat_r+0x20>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f7fc fd93 	bl	8001034 <_fstat>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d102      	bne.n	8004518 <_fstat_r+0x1c>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b103      	cbz	r3, 8004518 <_fstat_r+0x1c>
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	bf00      	nop
 800451c:	20000308 	.word	0x20000308

08004520 <_isatty_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	@ (800453c <_isatty_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc fd92 	bl	8001054 <_isatty>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_isatty_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_isatty_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000308 	.word	0x20000308

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
